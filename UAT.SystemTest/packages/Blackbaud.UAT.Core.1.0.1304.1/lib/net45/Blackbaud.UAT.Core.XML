<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blackbaud.UAT.Core</name>
    </assembly>
    <members>
        <member name="T:Blackbaud.UAT.Base.BaseComponent">
            <summary>
            Base functionality class common to all controls.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.getXButton(System.String)">
            <summary>
            Format an XPath to find a button.  Adds no additional constraints other than
            the caption of the button equalling the provided value.
            </summary>
            <param name="caption">The caption of the button.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.getXMenuItem(System.String)">
            <summary>
            Given the caption name of a menu item, return a unique identifier xPath
            to find a menu item.
            </summary>
            <param name="caption">The caption of the functional area.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.ConvertToBool(System.String)">
            <summary>
            Convert the string to a bool value.
            </summary>
            <param name="value">The string to try and convert to a bool.</param>
            <returns>A bool if successfully converted.  Unrecognized values throw a NotSupportedException</returns>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.SetCheckbox(System.String,System.String)">
            <summary>
            Click a checkbox if it is not the desired value.
            </summary>
            <param name="xPath">The xPath to use for finding the checkbox INPUT.</param>
            <param name="value">The value to set the checkbox to.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.SetCheckbox(System.String,System.Boolean)">
            <summary>
            Click a checkbox if it is not the desired value.
            </summary>
            <param name="xPath">The xPath to use for finding the checkbox INPUT.</param>
            <param name="value">True if the checkbox should be checked, false otherwise.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.ElementValueIsNotNullOrEmpty(System.String,System.Double)">
            <summary>
            Wait until a displayed element found with the provided xPath does not have a null or empty value
            If no matching element is found, a WebDriverTimeoutException is thrown.
            </summary>
            <param name="xPath">The xPath to use for finding an element.</param>
            <param name="secondsToWait">Timeout allowed in seconds.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.ElementValueIsSet(System.String,System.String,System.Double)">
            <summary>
            Wait until a displayed element found with the provided xPath has the expected value as its text.
            If no matching element is found with the expected value, a WebDriverTimeoutException is thrown.
            </summary>
            <param name="xPath">The xPath to use for finding an element.</param>
            <param name="expectedvalue">The expected text value of the element.</param>
            <param name="secondsToWait">Timeout allowed in seconds.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.ExistsNow(System.String)">
            <summary>
            Check if a displayed element exists immediately using the provided xPath selector.
            </summary>
            <param name="xPath">The xPath selector to find an element with.</param>
            <returns>True if a valid element is found immediately, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.Exists(System.String,System.Double)">
            <summary>
            Checks if a displayed element exists using the provided xPath selector.
            </summary>
            <param name="xPath">The xPath selector to find an element with.</param>
            <param name="secondsToWait">The time to spend looking for the element.  Defaults to TimeoutSecs.</param>
            <returns>True if a valid element is found within the time to wait, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.GetDisplayedElement(System.String,System.Double)">
            <summary>
            Get the displayed IWebElement using the provided xPath.
            </summary>
            <param name="xPath">The xPath selector to find an element with.</param>
            <param name="waitTime">The amount of time to search for the a valid element.  Default time is TimeoutSecs.</param>
            <returns>An IWebElement if a valid element is found. A WebDriverTimeoutException is thrown is no element is found.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.MapColumnCaptionsToIndex(System.Collections.Generic.ICollection{System.String},System.String)">
            <summary>
            Create a mapping of the column captions as keys to their DOM index values.
            </summary>
            <param name="captions">The list of captions to map.</param>
            <param name="headersxPath">An xPath to get a parent element of the desired TR header columns.</param>
            <returns>Mapping of column captions to an index.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.GetDatalistColumnIndex(System.String,System.String)">
            <summary>
            Given the xPath for a datalist/grid's headers and the caption of a datalist column, find the index of the column
            as it relates to the DOM.
            </summary>
            <param name="headersxPath">Unique xPath for getting the TR column header row.</param>
            <param name="columnCaption">The caption of the section's datalist column whose index to find.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.GetEnabledElement(System.String,System.Double)">
            <summary>
            Get the first found IWebElement based on an xPath that is Displayed AND Enabled.
            If no element is found, a WebDriverTimeoutException is thrown.
            </summary>
            <param name="xPath">The xPath selector to find an element with.</param>
            <param name="waitTime">The amount of time to search for the a valid element.  Default time is TimeoutSecs.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.ClickButton(System.String)">
            <summary>
            Clicks a basic button.
            Uniqueness is dependent purely on the caption!
            </summary>
            <param name="caption"></param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.WaitClick(System.String,System.Double)">
            <summary>
            Find an element using a provided xPath, wait for it to be displayed and enabled then Click.
            </summary>
            <param name="xPath">The xPath to find the element by.</param>
            <param name="timeout">The amount of time to try and find a displayed and enabled element to click
            before throwing a WebDriverTimeoutException.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.WaitDoubleClick(System.String,System.Double)">
            <summary>
            Find an element using a provided xPath, wait for it to be displayed and enabled then DoubleClick.
            </summary>
            <param name="xPath">The xPath to find the element by.</param>
            <param name="timeout">The amount of time to try and find a displayed and enabled element to DoubleClick
            before throwing a WebDriverTimeoutException.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.WaitSendKeys(System.String,System.String,System.Double)">
            <summary>
            Find an element using a provided xPath, wait for it to be displayed and enabled then SendKeys directly to it.
            This is intended for sending directly to input elements e.g. to bypass a native file chooser.
            </summary>
            <param name="xPath">The xPath to find the element by.</param>
            <param name="keysToSend">The String of Keys to send to the input.</param>
            <param name="timeout">The amount of time to try and find a displayed and enabled element to DoubleClick
            before throwing a WebDriverTimeoutException.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.WaitSendKeys(System.String,System.String)">
            <summary>
            Find an element using a provided xPath, wait for it to be displayed and enabled then SendKeys directly to it.
            This is intended for sending directly to input elements e.g. to bypass a native file chooser.
            </summary>
            <param name="xPath">The xPath to find the element by.</param>
            <param name="keysToSend">The String of Keys to send to the input.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.WaitDoubleClick(System.String)">
            <summary>
            Find an element using a provided xPath, wait for it to be displayed and enabled then DoubleClick.        /// </summary>
            <param name="xPath">The xPath to find the element by.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.WaitClick(System.String)">
            <summary>
            Find an element using a provided xPath and click it once it is displayed and enabled.
            </summary>
            <param name="xPath">The xPath to find the element by.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.CopyToClipBoard(System.String)">
            <summary>
            Start a new thread that copies a value to the System's Clipboard and waits for that
            thread to return.
            </summary>
            <param name="value">The value to copy to the clipboard.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.SetTextField(System.String,System.String)">
            <summary>
            Set the value of a field by copy pasting the value into the field and sending a Tab keystroke.
            </summary>
            <param name="xPath">The xPath to find an element for setting the value to.</param>
            <param name="value">The desired value of the element.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.BaseComponent.SetCredentailsField(System.String,System.String)">
            <summary>
            Specialist version of setTextField to deal with the lack of focus in a login splash screen.
            </summary>
            <param name="xPath">The xPath to find an element for setting the value to.</param>
            <param name="value">The desired value of the element.</param>
        </member>
        <member name="P:Blackbaud.UAT.Base.BaseComponent.TimeoutSecs">
            <summary>
            The default WebDriver timeout value represented in seconds.
            </summary>
        </member>
        <member name="P:Blackbaud.UAT.Base.BaseComponent.Title">
            <summary>
            Return the default page title
            </summary>
        </member>
        <member name="P:Blackbaud.UAT.Base.BaseComponent.Driver">
            <summary>
            Selenium WebDriver used to interact with the web browser.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Base.FieldType">
            <summary>
            Represents the various type of fields with supported setter utility methods.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Base.FieldType.TextInput">
            <summary>
            An input text field.  This should also be used for grid cells that are text fields.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Base.FieldType.TextArea">
            <summary>
            A textarea text field.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Base.FieldType.Dropdown">
            <summary>
            A dropdown field.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Base.FieldType.Searchlist">
            <summary>
            A searchlist field.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Base.FieldType.Checkbox">
            <summary>
            A checkbox or radiobox field.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Base.FieldType.TextIframe">
            <summary>
            An IFrame text field.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Base.CrmField">
            <summary>
            Wrapper class to encapsulate a field caption with a field type, unique element id, and search dialog ids when required.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Base.CrmField.Id">
            <summary>
            The unique Id contained in the id attribute.
            i.e. '_CONSTITUENTID_value'
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Base.CrmField.CellType">
            <summary>
            The type of field.  Used to associate the field with a setter utility method.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Base.CrmField.SearchDialogId">
            <summary>
            The unique id of the search dialog that would appear upon clicking the search icon of
            the associated grid cell.
            i.e. 'DesignationSearch'
            Used for fields associated with 'BatchGridCellType.Searchlist'.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Base.CrmField.SearchDialogFieldId">
            <summary>
            The unique id of the search dialog field that would appear upon clicking the search icon of
            the associated grid cell.
            i.e. 'COMBINEDSEARCH'
            Used for fields associated with 'BatchGridCellType.Searchlist'.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Base.CrmField.#ctor(System.String,Blackbaud.UAT.Base.FieldType)">
            <summary>
            Set the field id and associated setter utility method.
            </summary>
            <param name="id">The unique Id contained in the id attribute.  i.e. '_CONSTITUENTID_value'</param>
            <param name="cellType">The type of grid cell.  Used to associate the cell with a setter utility method.</param>
        </member>
        <member name="M:Blackbaud.UAT.Base.CrmField.#ctor(System.String,Blackbaud.UAT.Base.FieldType,System.String,System.String)">
            <summary>
            Set the batch column id and associated setter utility method.  To only be used
            with grid cells where the value should be set using a searchlist.
            </summary>
            <param name="id">The unique Id contained in the class attribute.  i.e. '_CONSTITUENTID_value'</param>
            <param name="cellType">The type of grid cell.  Used to associate the cell with a setter utility method.</param>
            <param name="searchDialogId">The unique id of the search dialog that would appear upon clicking the search icon of
            the associated grid cell.  i.e. 'DesignationSearch'</param>
            <param name="searchDialogFieldId">The unique id of the search dialog field that would appear upon clicking the search icon of
            the associated grid cell.  i.e. 'COMBINEDSEARCH'</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Base.BaseSteps">
            <summary>
            Base class for Specflow Step classes.  Provides access to common functionality in step classes.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Base.BaseSteps.FailTest(System.String)">
            <summary>
            Fail a test by throwing a SpecFlowException with the provided message
            </summary>
            <param name="errorMessage">The message to output with the SpecFlowException</param>
        </member>
        <member name="P:Blackbaud.UAT.Core.Base.BaseSteps.uniqueStamp">
            <summary>
            Time stamp that should be static for all test step definitions in a scenario
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.CommitmentsDialog">
            <summary>
            Class to handle the interactions for adding/editing a commitments dialog.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.Dialog">
            <summary>
            Base class to handle the interactions for dialogs. 
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXTabStrip">
            <summary>
            Constant xPath for the tab strip of a dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXGridEditCellSearchlist">
            <summary>
            Constant xPath for the searchlist icon of a grid's edit cell.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXGridEditCellDropdownArrow">
            <summary>
            Constant xPath for the dropdown arrow of a grid's edit cell.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXGridEditCell">
            <summary>
            The unique xPath for the input of the currently selected cell in a Grid.
            
            When a grid cell is selected, an HTML edit input is created where the actual value should
            be set.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXGridFocusedEditCell">
            <summary>
            The unique xPath for the input of the currently selected cell in a Grid adding the 'focused' criteria
            
            NOTE: this is risky to use because the focus attribute is unreliably set and can cause MANY race conditions.
            The 'focused' criteria is also not always set on the edit cell depending on the approach you went to select a grid cell.
            
            When a grid cell is selected, an HTML edit input is created where the actual value should
            be set.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXIFrameHtmlBodyP">
            <summary>
            Constant xPath for the 'mceContentBody' of an HTML element.  This is generally in an IFrame field.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXSaveAndCloseButton">
            <summary>
            Constant xPath value for finding a 'Save and close' button WebElement.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXYesButton">
            <summary>
            Constant xPath value for finding a 'Yes' button WebElement.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXOKButton">
            <summary>
            Constant xPath value for finding an OK button WebElement.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXCancelButton">
            <summary>
            Constant xPath value for finding a Cancel button WebElement.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXSaveButton">
            <summary>
            Constant xPath value for finding a Save button WebElement.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXDropdownList">
            <summary>
            Constant xPath for the entire visible dropdown list.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXDropdownListItems">
            <summary>
            Constant xPath for all items in the visible dropdown list.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXTab(System.String)">
            <summary>
            Format a unique xPath for a tab on a dialog.
            </summary>
            <param name="tabCaption">The caption of the tab.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXTab(System.String,System.String)">
            <summary>
            Format a unique xPath for a tab on a dialog.
            </summary>
            <param name="tabCaption">The caption of the tab.</param>
            <param name="dialogId">The dialog's unique id identifier - i.e. 'RevenueBatchConstituentInbatchEditForm'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.OpenTab(System.String)">
            <summary>
            Open the tab of a dialog.
            </summary>
            <param name="caption">The caption of the tab.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.OpenTab(System.String,System.String)">
            <summary>
            Open the tab of a dialog.
            </summary>
            <param name="caption">The caption of the tab.</param>
            <param name="dialogId">The dialog's unique id identifier - i.e. 'RevenueBatchConstituentInbatchEditForm'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXCloseX">
            <summary>
            Returns an xPath for the close Window [X] on the Dialog.
            
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXDialogButton(System.String)">
            <summary>
            Returns an xPath for any button that is a decendant of a visible bbui-dialog and having "buttonText" text.
            Uniqueness depends on the text passed.
            
            </summary>
            <param name="buttonText">The text of the required button.</param>        
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXEntireDialogButton(System.String,System.String)">
            <summary>
            Format an xPath for finding a dialog's button including the common bottom bar that contains buttons
            such as Save, Close, and Cancel.
            </summary>
            <param name="buttonText">The caption of the button.</param>
            <param name="dialogId">The dialog's unique id identifier - i.e. 'RevenueBatchConstituentInbatchEditForm'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXDialogButton(System.String,System.String)">
            <summary>
            Format an xPath for finding a dialog's button.
            </summary>
            <param name="buttonText">The caption of the button.</param>
            <param name="dialogId">The dialog's unique id identifier - i.e. 'RevenueBatchConstituentInbatchEditForm'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXGridCell(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Formats the unique xPath for getting a single grid TD element that belongs to a specified
            row and columun in a grid on a dialog.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. 'PlanOutlineAddForm'</param>
            <param name="gridId">The HTML [] element's unique id identifier - i.e. 'PLANOUTLINESTEPS'</param>
            <param name="row">Row number to use.  Counting starts at 1</param>
            <param name="columnIndex">Column index to use.  Column indexing does NOT always start at 1 or 0 as columns can be hidden.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXGridRow(System.String,System.String,System.Int32)">
            <summary>
            Formats the unique xPath for getting a single grid row.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. 'PlanOutlineAddForm'</param>
            <param name="gridId">The HTML [] element's unique id identifier - i.e. 'PLANOUTLINESTEPS'</param>
            <param name="row">Row number to use.  Counting starts at 1</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXGridRowSelector(System.String,System.String,System.Int32)">
            <summary>
            Format the unique xPath for selecting a single grid row.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. 'PlanOutlineAddForm'</param>
            <param name="gridId">The HTML [] element's unique id identifier - i.e. 'PLANOUTLINESTEPS'</param>
            <param name="row">Row number to use.  Counting starts at 1</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXGridHeaders(System.String,System.String)">
            <summary>
            Formats the unique xPath for getting the TR row header element that belongs to
            a grid on a dialog.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. 'PlanOutlineAddForm'</param>
            <param name="gridId">The HTML [] element's unique id identifier - i.e. 'PLANOUTLINESTEPS'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXIFrame(System.String,System.String)">
            <summary>
            Given the unique HTML element ids of a dialog and div, return a unique identifier xPath
            to find the IFRAME field.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. '_individualSpouseBusinessAddForm'</param>
            <param name="divId">The DIV element's unique id identifier - i.e. 'HTMLNOTE'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXLinkByAction(System.String,System.String)">
            <summary>
            Format an xPath to find a link on the dialog.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. '_individualSpouseBusinessAddForm'</param>
            <param name="linkId">The unique id associated with the link - i.e. 'SPLITSACTION'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXLinkByCaption(System.String,System.String)">
            <summary>
            Format an xPath to find a link on the dialog.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. '_individualSpouseBusinessAddForm'</param>
            <param name="caption">'The caption/text of the link.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXDiv(System.String,System.String)">
            <summary>
            Given the unique HTML element ids of a dialog and div, return a unique identifier xPath
            to find the DIV field.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. 'PledgeAddForm'</param>
            <param name="divId">The 'a' link element's unique id identifier - i.e. 'SHOWSYSTEM'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXTextArea(System.String,System.String)">
            <summary>
            Given the unique HTML element ids of a dialog and textarea, return a unique identifier xPath
            to find the TEXTAREA field.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. '_individualSpouseBusinessAddForm'</param>
            <param name="textAreaId">The TEXTAREA element's unique id identifier - i.e. '_DESCRIPTION_value'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXButton(System.String,System.String)">
            <summary>
            Format a unique xPath identifier to find a button on a dialog.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. 'EventManagementTemplateAddDataForm'</param>
            <param name="buttonCaption">The caption of the button.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXSpan(System.String,System.String)">
            <summary>
            Given the unique HTML element ids of a dialog and span, return a unique identifier xPath
            to find the SPAN field.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. '_EventSummaryViewForm3'</param>
            <param name="spanId">The SPAN element's unique id identifier - i.e. '_LOCATION_value'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXInput(System.String,System.String)">
            <summary>
            Given the unique HTML element ids of a dialog and input, return a unique identifier xPath
            to find the INPUT field.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. '_individualSpouseBusinessAddForm'</param>
            <param name="inputId">The INPUT element's unique id identifier - i.e. '_LASTNAME_value'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXInputSearchTrigger(System.String)">
            <summary>
            Format an xPath to find the search trigger button associated with an input field.
            </summary>
            <param name="dialogInputXPath">The unique xPath of the dialog input.  Likely will have used Dialog.getXInput() to format
            the xPath.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXInputNewFormTrigger(System.String)">
            <summary>
            Format an xPath to find the new-form trigger button associated with an input field.
            </summary>
            <param name="dialogInputXPath">The unique xPath of the dialog input.  Likely will have used Dialog.getXInput() to format
            the xPath.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXVisibleDialog">
            <summary>
            Format an xPath to get a visible dialog.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXDialogById(System.String)">
            <summary>
            Format an xPath to get a dialog based on its unique id.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. 'FundraisingSearch'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXDialogByClass(System.String)">
            <summary>
            Format an xPath to get a dialog based on an value contained in the class attribute of the root dialog DIV.
            </summary>
            <param name="classValue">The value to see if contained in the class attribute.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.Yes">
            <summary>
            Click the 'Yes' button
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.OK">
            <summary>
            Click the 'OK' button
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.Cancel">
            <summary>
            Click the 'Cancel' button
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.Save">
            <summary>
            Click the 'Save' button
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXDropdownItem(System.String)">
            <summary>
            Formats an xPath for a dropdown item.
            </summary>
            <param name="caption">The caption value of the dropdown list item.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.getXDropdownArrow(System.String)">
            <summary>
            Formats an xPath for the arrow dropdown of a dropdown INPUT field.
            </summary>
            <param name="dropdownxPath">The xPath of the dropdown.  Advised to use Dialog.getXInput()</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.DropdownValueExists(System.String,System.String)">
            <summary>
            Check if a value exists as a selectable item in a dropdown list.
            </summary>
            <param name="xPath">The xPath of the dropdown.  Advised to use Dialog.getXInput()</param>
            <param name="value">The value to check for as an option in the dropdown.</param>
            <returns>True if the value is an option, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.SetHtmlField(System.String,System.String)">
            <summary>
            Set an IFrame HTML field's value.
            </summary>
            <param name="xPath">The xPath of the IFrame.  Advised to use Dialog.getXIFrame()</param>
            <param name="value">The value to set in the HTML body of the IFrame.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.SetDropDown(System.String,System.String)">
            <summary>
            Set a Dropdown field.
            
            WebDriverTimeoutException is thrown if no value is found.
            </summary>
            <param name="xPath">The xPath to find the dropdown INPUT element with</param>
            <param name="value">The value to set the dropdown to.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.SetGridSearchList(System.String,System.String,System.String)">
            <summary>
            Set a grid cell's value using the searchlist.
            </summary>
            <param name="xPath">The xPath of the grid cell TD element.</param>
            <param name="searchDialogxPath">The xPath of the search dialog's field to set.</param>
            <param name="value">The value to set and use as search criteria in the specified search dialog field.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.SetGridDropDown(System.String,System.String)">
            <summary>
            Set a Grid cell's value for a dropdown field.
            </summary>
            <param name="xPath">The xPath of the grid cell TD element.</param>
            <param name="value">The value to set the cell to.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.SetGridTextField(System.String,System.String)">
            <summary>
            Set a Grid cell's value for a text field.
            </summary>
            <param name="xPath">The xPath of the grid cell TD element.</param>
            <param name="value">The value to set the cell to.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.SetSearchList(System.String,System.String,System.String)">
            <summary>
            Set a field's value using the associated search dialog to the first found item in the search results.
            </summary>
            <param name="xPath">The xPath of the field to set.</param>
            <param name="searchFieldxPath">The xPath of the search dialog's field to set.</param>
            <param name="value">The value to set and use as search criteria in the specified search dialog field.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.ClickButton(System.String,System.String)">
            <summary>
            Click a button that has a new dialog appear.  Continuely click the button
            until the new dialog appears.
            </summary>
            <param name="caption">The caption of the dialog button</param>
            <param name="dialogId">The new dialog's unique id identifer. i.e. - 'RevenueBatchConstituentInbatchEditForm' 
            If null is provided, then the method waits for a message box dialog that contains no unique id.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.ClickButton(System.String,System.Double)">
            <summary>
            Click a dialog button.
            </summary>
            <param name="caption">The caption of the dialog button.</param>
            <param name="timeout">The amount of time to try and find a valid button to click before
            a WebDriverTimeoutException is thrown.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.ClickButton(System.String)">
            <summary>
            Click a dialog button.
            </summary>
            <param name="caption">The caption of the dialog button.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.CloseDialog">
            <summary>
            Close the Dialog
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.GetDialogId(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Wait for a dialog to appear that has a unique is in the provided list of
            ids and return the matching id.
            </summary>
            <param name="supportedIds">A list of ids to wait for.</param>
            <returns>The first found matching id for a dialog that is visible with that id.
            If no id is found, a WebDriverTimeoutException is eventually thrown.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.SetField(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,Blackbaud.UAT.Base.CrmField})">
            <summary>
            Set any supported field's value for any supported field type.
            </summary>
            <param name="dialogId">The unique of the dialog.  i.e. 'RevenueBatchConstituentInbatchEditForm'</param>
            <param name="caption">The caption of the field.</param>
            <param name="value">The desired value of the field.</param>
            <param name="supportedFields">Mapping of the supported field captions to a CrmField object encapsulating all relevant variables
            needed to set the field's value.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.SetFields(System.String,TechTalk.SpecFlow.TableRow,System.Collections.Generic.IDictionary{System.String,Blackbaud.UAT.Base.CrmField})">
            <summary>
            Set all supported and displayed field values for any supported field type.
            </summary>
            <param name="dialogId">The unique id of the dialog.  i.e. 'RevenueBatchConstituentInbatchEditForm'</param>
            <param name="fields">Mapping of the field captions to their desired values.</param>
            <param name="supportedFields">Mapping of the supported field captions to a CrmField object encapsulating all relevant variables
            needed to set the field's value.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.SetFields(System.String,TechTalk.SpecFlow.TableRow,System.Collections.Generic.IDictionary{System.String,Blackbaud.UAT.Base.CrmField},System.Collections.Generic.IDictionary{System.String,Blackbaud.UAT.Base.CrmField})">
            <summary>
            Set all supported and displayed field values for any supported field type.
            </summary>
            <param name="dialogId">The unique id of the dialog.  i.e. 'RevenueBatchConstituentInbatchEditForm'</param>
            <param name="fields">Mapping of the field captions to their desired values.</param>
            <param name="supportedFields">Mapping of the supported field captions to a CrmField object encapsulating all relevant variables
            needed to set the field's value.</param>
            <param name="customSupportedFields">Mapping of field captions to to a CrmField oject encapsulating
            all relevant variables.  Field in the supportedFields mapping can be overridden by including them in this mapping.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.SetGridRow(System.String,System.String,TechTalk.SpecFlow.TableRow,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,Blackbaud.UAT.Base.CrmField})">
            <summary>
            Set a single row's values for a grid.
            </summary>
            <param name="dialogId">The unique id of the dialog.  i.e. 'EventTaskAddForm'</param>
            <param name="gridId">The unique id of the grid - i.e. '_REMINDERS_'</param>
            <param name="row">Mapping of the column captions to a single row's desired values.</param>
            <param name="rowIndex">The index of the row to set.  
            The first row's index is represented as 1.</param>
            <param name="columnCaptionToIndex">Mapping of the column captions to their DOM TR index.</param>
            <param name="supportedFields">Mapping of the supported field captions to a CrmField object encapsulating all relevant variables
            needed to set the field's value.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.SetGridRow(System.String,System.String,TechTalk.SpecFlow.TableRow,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,Blackbaud.UAT.Base.CrmField},System.Collections.Generic.IDictionary{System.String,Blackbaud.UAT.Base.CrmField})">
            <summary>
            Set a single row's values for a grid.
            </summary>
            <param name="dialogId">The unique id of the dialog.  i.e. 'EventTaskAddForm'</param>
            <param name="gridId">The unique id of the grid - i.e. '_REMINDERS_'</param>
            <param name="row">Mapping of the column captions to a single row's desired values.</param>
            <param name="rowIndex">The index of the row to set.  
            The first row's index is represented as 1.</param>
            <param name="columnCaptionToIndex">Mapping of the column captions to their DOM TR index.</param>
            <param name="supportedFields">Mapping of the supported field captions to a CrmField object encapsulating all relevant variables
            needed to set the field's value.</param>
            <param name="customSupportedFields">Mapping of field captions to a CrmField oject encapsulating
            all relevant variables.  Field in the supportedFields mapping can be overridden by including them in this mapping.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.SetGridRows(System.String,System.String,TechTalk.SpecFlow.Table,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,Blackbaud.UAT.Base.CrmField})">
            <summary>
            Set the row values for a grid.
            </summary>
            <param name="dialogId">The unique id of the dialog.  i.e. 'EventTaskAddForm'</param>
            <param name="gridId">The unique id of the grid - i.e. '_REMINDERS_'</param>
            <param name="rows">Table where each TableRow a row to set.
            Each TableRow is a mapping of the column captions to a single row's desired values.</param>
            <param name="startingRowIndex">The row index to start adding rows from.  
            The first row's index is represented as 1.</param>
            <param name="columnCaptionToIndex">Mapping of the column captions to their DOM TR index.</param>
            <param name="supportedFields">Mapping of the supported field captions to a CrmField object encapsulating all relevant variables
            needed to set the field's value.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.Dialog.SetGridRows(System.String,System.String,TechTalk.SpecFlow.Table,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,Blackbaud.UAT.Base.CrmField},System.Collections.Generic.IDictionary{System.String,Blackbaud.UAT.Base.CrmField})">
            <summary>
            Set the row values for a grid.
            </summary>
            <param name="dialogId">The unique id of the dialog.  i.e. 'EventTaskAddForm'</param>
            <param name="gridId">The unique id of the grid - i.e. '_REMINDERS_'</param>
            <param name="rows">Table where each TableRow a row to set.
            Each TableRow is a mapping of the column captions to a single row's desired values.</param>
            <param name="startingRowIndex">The row index to start adding rows from.  
            The first row's index is represented as 1.</param>
            <param name="columnCaptionToIndex">Mapping of the column captions to their DOM TR index.</param>
            <param name="supportedFields">Mapping of the supported field captions to a CrmField object encapsulating all relevant variables
            needed to set the field's value.</param>
            <param name="customSupportedFields">Mapping of field captions to to a CrmField oject encapsulating
            all relevant variables.  Field in the supportedFields mapping can be overridden by including them in this mapping.</param>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.CommitmentsDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.CommitmentsDialog.SupportedAddtionalApplicationsGridFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.CommitmentsDialog.SetAdditionalApplicationsGridRows(TechTalk.SpecFlow.Table)">
            <summary>
            Set the grid rows for the Additional applications grid starting with the first row.
            </summary>
            <param name="applications">Table where each TableRow corresponds to a grid row's values.
            A TableRow is a mapping of the column captions to a single row's desired values</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.DesignationsDialog">
            <summary>
            Class to handle the interactions for adding/editing a designations dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.DesignationsDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.DesignationsDialog.SupportedFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.DesignationsDialog.SplitDesignationsEvenly(TechTalk.SpecFlow.Table)">
            <summary>
            Set the designations grid rows starting with the first row and distribute the amount evenly.
            </summary>
            <param name="designations">Table where each TableRow corresponds to a grid row's values.
            A TableRow is a mapping of the column captions to a single row's desired values</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.DesignationsDialog.SplitDesignations(TechTalk.SpecFlow.Table,System.Boolean)">
            <summary>
            Set the designations grid rows starting with the first row and distribute the amount evenly
            if specified.
            </summary>
            <param name="designations">Table where each TableRow corresponds to a grid row's values.
            A TableRow is a mapping of the column captions to a single row's desired values</param>
            <param name="evenly">Flag indicating whether to split the designations evenly</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.EventDialog">
            <summary>
            Class to handle the interactions for adding/editing an event dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.EventDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.EventDialog.SupportedFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.EventDialog.SetFields(TechTalk.SpecFlow.TableRow)">
            <summary>
            Set the fields to their desired values.
            </summary>
            <param name="fields">Mapping of the field captions to their desired values.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.PledgeDialog">
            <summary>
            Class to handle the interactions for adding/editing pledge dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.PledgeDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.PledgeDialog.SupportedFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.PledgeDialog.SplitDesignationsEvenly(TechTalk.SpecFlow.Table)">
            <summary>
            Split pledge evenly among the provided designations.
            </summary>
            <param name="designations">Table where each row represents a designation to add.  
            A row is a mapping of the 'Split designations' grid's column captions to the row's values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.PledgeDialog.SetAccountSystem(System.String)">
            <summary>
            Set the account system of the pledge.
            </summary>
            <param name="system">The account system to use.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.PledgeDialog.EditInstallmentDesignations">
            <summary>
            Click the 'Edit installment designations' button and load the associated dialog.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.PledgeDialog.SetFields(TechTalk.SpecFlow.TableRow)">
            <summary>
            Set the fields to their desired values
            </summary>
            <param name="fieldValues">Mapping of the field captions to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.PledgeDialog.SetFields(TechTalk.SpecFlow.TableRow,System.Collections.Generic.IDictionary{System.String,Blackbaud.UAT.Base.CrmField})">
            <summary>
            Set the fields to their desired values
            </summary>
            <param name="fieldValues">Mapping of the field captions to their desired values</param>
            <param name="customSupportedFields">Mapping of field captions to to a CrmField oject encapsulating
            all relevant variables.  Field in the supportedFields mapping can be overridden by including them in this mapping.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog">
            <summary>
            Class to handle the unique fields and actions for filling out an 'Add Membership Program' dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXMembershipProgramButton">
            <summary>
            XPath for the Membership program button
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXAddMembershipButton">
            <summary>
            XPath for the add Membership program button
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXProgramNameField">
            <summary>
            XPath for the Program name field
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXProgramKindAnnual">
            <summary>
            XPath for the Membership program kind annual field
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXProgramObtainDues">
            <summary>
            XPath for the Program Obtain Dues HTML field
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXAddMembershipNextButton">
            <summary>
            XPath for the add Membership next button
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXProgramLevelNameHeader">
            <summary>
            XPath for the Membership program level name header
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXProgramLevelCurrentEdit">
            <summary>
            XPath to the Membership program level current editor
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXProgramLevelPriceHeader">
            <summary>
            XPath for the Membership program level price header
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXBenefitsCardFormatDropDown">
            <summary>
            XPath for the Benefits card format dropdown list
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXDuesInstallments">
            <summary>
            XPath for the Dues installments
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXMembershipTerm">
            <summary>
            XPath for the Membership term
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXReviewSave">
            <summary>
            Xpath for Review save
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXHeaderPanel">
            <summary>
            XPath for the header panel
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXYesReallyDelete">
            <summary>
            Xpath for delete yes option
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.MembershipPrograms">
            <summary>
            Clicks the Membership program button
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.CreateMembershipProgram(System.String)">
            <summary>
            Create Membership program
            </summary>
            <param name="name">Name of the Membership program to create</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.CreateMembershipProgramAnnual">
            <summary>
            Create Membership program annual
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.CreateMembershipProgramDues">
            <summary>
            Create Membership program dues by setting checkbox
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.CreateMembershipProgramNext">
            <summary>
            Click the create Membership program next button
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.ProgramLevelNameHeaderElement">
            <summary>
            Element to represent the membership program level name header
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.ProgramLevelCurrentEditElement">
            <summary>
            Element to represent the membership program current editor
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.CreateMembershipProgramLevelName(System.String)">
            <summary>
            Create Membership program level of the string passed in
            </summary>
            <param name="name">Name of level to create</param>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.ProgramLevelPriceHeaderElement">
            <summary>
            Element to represent the Membership program level price header
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.CreateMembershipProgramLevelPrice(System.String)">
            <summary>
            Create Membership program level price
            </summary>
            <param name="price">Price to create</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.CreateMembershipProgramBenefitsOptionsFormat(System.String)">
            <summary>
            Create Membership program benefits options format fro the string passed
            </summary>
            <param name="format">The format to be created</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.CreateMembershipProgramDuesOptionsInstallments">
            <summary>
            
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.CreateMembershipProgramRenewalOptionsTerm(System.String)">
            <summary>
            Create Membership program renewal options term
            </summary>
            <param name="term">The term to be created</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.CreateMembershipProgramReviewSave">
            <summary>
            Create Membership program review
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.CheckMembershipProgramExists(System.String)">
            <summary>
            Check Membership program exists for the passed string
            </summary>
            <param name="name">The name to check for</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXProgramLink(System.String)">
            <summary>
            Xpath for the Program link
            </summary>
            <param name="caption"></param>
            <returns></returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.getXDeleteProgramLink(System.String)">
            <summary>
            Xpath for the delete Program link
            </summary>
            <param name="caption"></param>
            <returns></returns>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.ProgramLinkElement">
            <summary>
            Elemt for Program link
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AddMembershipProgramDialog.DeleteMembershipProgram(System.String)">
            <summary>
            Delete Mambership program by string passed in
            </summary>
            <param name="name">The name of the program to delete</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog">
            <summary>
            Base class to handle the interactions for adding/editing a batch dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog.BatchDialogId">
            <summary>
            BatchDialogId constant
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog.BatchDialogGridId">
            <summary>
            BatchDialogGridId constant
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog.getXBatchGridHeaders">
            <summary>
            Unique XPath to get the header columns TR element of a batch's grid.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog.ColumnToBatchColumn">
            <summary>
            Maps batch grid column captions to their required values in order to set their values in rows.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog.GetColumnIndexByCaption(System.String)">
            <summary>
            Get the index of the column in the batch grid.
            </summary>
            <param name="caption">The caption of the column.</param>
            <returns>The index of the TD column element within the TR headers.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog.GetColumnIndexById(System.String)">
            <summary>
            Get the index of the column in the batch grid.
            </summary>
            <param name="columnId">The unique id of the column.</param>
            <returns>The index of the TD column element within the TR headers.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog.GetGridCellValue(System.String,System.Int32)">
            <summary>
            Get the value of a batch grid cell.
            </summary>
            <param name="caption">The column caption of the cell.</param>
            <param name="row">The row index of the cell.  The first row is index 1.</param>
            <returns>The value of the cell.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog.SetGridCell(System.String,System.String,System.Int32)">
            <summary>
            Set the value of a batch grid cell for a specified row.
            </summary>
            <param name="caption">The caption of the column.</param>
            <param name="value">The desired value of the row.</param>
            <param name="row">The index of the row.  The first row's index is 1.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog.SetGridRows(TechTalk.SpecFlow.Table)">
            <summary>
            Set the rows of a batch grid starting with the first row.
            </summary>
            <param name="batchRows">Table where each TableRow represents a grid row to set.
            A TableRow is a mapping of the batch column captions to a single row's desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog.SetGridRow(TechTalk.SpecFlow.TableRow,System.Int32)">
            <summary>
            Set the row of a batch grid.
            </summary>
            <param name="batchRow">Mapping of the batch column captions to a single row's desired values.</param>
            <param name="row">The index of the row.  The first row starts at index 1.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog.Validate">
            <summary>
            Click the 'Validate' button and click Ok on the confirmation button.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog.SaveAndClose">
            <summary>
            Click the 'Save and close' button.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.BatchDialog.EditConstituent(TechTalk.SpecFlow.TableRow)">
            <summary>
            Edit the constituent for the currently selected batch row.
            </summary>
            <param name="fieldValues">Mapping of the field captions to their desired values.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.EnhancedRevenueBatchDialog">
            <summary>
            Class to handle the interactions for adding/editing an enhanced revenue batch dialog.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.EnhancedRevenueBatchDialog.UpdateProjectedTotals">
            <summary>
            Click the 'Update projected totals' and click Ok on the confirmation button.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.EnhancedRevenueBatchDialog.SplitDesignations(TechTalk.SpecFlow.Table,System.Boolean)">
            <summary>
            Click the 'Split designations' button and set the desgination grid's rows.  This will
            split the designation on the currently selected grid row.  The amount between the designations
            will be split evenly.
            </summary>
            <param name="designations">Table where each row represents a designation to add.
            Each row is a mapping of the column captions to the single row's desired values.</param>
            <param name="evenly">Flag indicating whether or not to split the designations evenly.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.EnhancedRevenueBatchDialog.Apply(TechTalk.SpecFlow.Table)">
            <summary>
            Click 'Apply' under the Revenue tab and set the designations in the 'Apply to commitments' dialog.
            </summary>
            <param name="applications">Table where each row represents an application to add.
            A row is a mapping of the column captions to a single row's desired values.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.IndividualDialog">
            <summary>
            Class to handle the interactions for adding/editing an individual dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.IndividualDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.IndividualDialog.SupportedFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.IndividualDialog.SetHouseholdFields(TechTalk.SpecFlow.TableRow)">
            <summary>
            Set the fields on the 'Household' tab.
            </summary>
            <param name="fieldValues">Mapping of the field captions to their desired values.  
            Empty strings will be considered values and set the field to a blank value.  Null values will be skipped.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.IndividualDialog.SetIndividualFields(TechTalk.SpecFlow.TableRow)">
            <summary>
            Set the fields on the 'Individual' tab.
            </summary>
            <param name="fieldValues">Mapping of the field captions to their desired values.  
            Empty strings will be considered values and set the field to a blank value.  Null values will be skipped.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.IndividualDialog.SetIndividualFields(TechTalk.SpecFlow.TableRow,System.Collections.Generic.IDictionary{System.String,Blackbaud.UAT.Base.CrmField})">
            <summary>
            Set the fields on the 'Individual' tab.
            </summary>
            <param name="fieldValues">Mapping of the field captions to their desired values.  
            Empty strings will be considered values and set the field to a blank value.  Null values will be skipped.</param>
            <param name="CustomSupportedFields">Mapping of field captions to a CrmField oject encapsulating
            all relevant variables.  Field in the default SupportedFields mapping can be overridden by including them in this mapping.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.IndividualDialog.SetLastName(System.String)">
            <summary>
            Set the 'Last name' field.
            </summary>
            <param name="lastName">The desired value of the field.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.IndividualDialog.Save">
            <summary>
            Save the dialog.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.MarketingAcknowledgementRuleDialog">
            <summary>
            Class to handle the interactions for adding/editing a marketing acknowledgement template rule dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.MarketingAcknowledgementRuleDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.MarketingAcknowledgementRuleDialog.SupportedFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MarketingAcknowledgementRuleDialog.SetDetailsTabFields(TechTalk.SpecFlow.TableRow)">
            <summary>
            Set the fields on the 'Details' tab of the dialog.
            </summary>
            <param name="fields">Mapping of the field captions to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MarketingAcknowledgementRuleDialog.Save(System.Int32)">
            <summary>
            Save the dialog and click 'Yes' on the subsequent confirmation dialogs.
            </summary>
            <param name="numOfApprovedChanges">The number of expected confirmation dialogs to accept.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog">
            <summary>
            Class to handle the interactions for adding/editing a marketing acknowledgement template dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog.SupportedFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog.SetGeneralTabFields(TechTalk.SpecFlow.TableRow)">
            <summary>
            Set the fields on the 'General' tab.
            </summary>
            <param name="fields">Mapping of the field captions to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog.SetSourceCode(System.String)">
            <summary>
            Set the 'Source code' field on the 'Source Code' tab.
            </summary>
            <param name="sourceCode">The desired value of the field.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog.IncludeAllRecords">
            <summary>
            Select the 'Include all records' box on the 'Universe' tab.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MarketingAcknowledgementTemplateDialog.SetActivationTabFields(TechTalk.SpecFlow.TableRow)">
            <summary>
            Set the fields on the 'Activation' tab.
            </summary>
            <param name="fields">Mapping of the field captions to their desired values.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog">
            <summary>
            Add Ad-hoc Query Dialog functions and interactions in BBCRM.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog.getXSaveOptionsInput(System.String)">
            <summary>
            Get an XPath for an input field on a NewAdhocQueryDialog.
            </summary>
            <param name="inputId">The Id of the input field.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog.getXSaveOptionsTextArea(System.String)">
            <summary>
            Get an XPath for a TextArea on a NewAdhocQueryDialog.
            </summary>
            <param name="AreaId">The id of the TextArea.</param>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog.getXFindField">
            <summary>
            Constant XPath for the 'Find' Field of an NewAdhocQueryDialog.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog.getXFieldResult(System.String)">
             <summary>
            Get an XPath for a result field on a NewAdhocQueryDialog.
             </summary>
             <param name="text">The text of the Result Field.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog.getXCriteriaInput(System.String)">
            <summary>
            Format a unique XPath for a Input on an AdHocQueryCriteriaForm on the NewAdhocQueryDialog.
            </summary>
            <param name="inputId">The ID of the input.</param>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog.getXAddFilterArrow">
            <summary>
            Constant XPath for the Add Filter Arrow on a NewAdhocQueryDialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog.getXAddOutputFieldArrow">
            <summary>
            Constant XPath for the Add Filter Arrow on a NewAdhocQueryDialog.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog.getXTab(System.String)">
            <summary>
            Format a unique XPath for a tab on the Ad-Hoc Query Dialog.
            </summary>
            <param name="tabCaption">The caption of the tab.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog.SetFindField(System.String)">
            <summary>
            Set the Find field to the input string
            </summary>
            <param name="field">The field to set</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog.IncludeRecordCriteria(System.String,TechTalk.SpecFlow.Table)">
            <summary>
            Include record criteria based on field and data in the table
            </summary>
            <param name="field">The field</param>
            <param name="criteria">Table of critera</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog.IncludeDisplayField(System.String)">
            <summary>
            Include display field based on string passed in
            </summary>
            <param name="field">The field to be included</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog.ApplyCriteria(TechTalk.SpecFlow.Table)">
            <summary>
            Apply criteria to the query based on the table passed in
            </summary>
            <param name="criteria">Table of criteria to apply</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.NewAdhocQueryDialog.SetSaveOptions(TechTalk.SpecFlow.Table)">
            <summary>
            Set the values on the 'Set save options' tab
            </summary>
            <param name="options">Dictionary mapping of the field captions to their desired values</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.PackageDialog">
            <summary>
            Class to handle the interactions for adding/editing a package dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.PackageDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.PackageDialog.SupportedFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.PackageDialog.SetFields(TechTalk.SpecFlow.TableRow)">
            <summary>
            Set the field values.
            </summary>
            <param name="fields">Mapping of the field captions to their desired values.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.PaymentDialog">
            <summary>
            Class to handle the interactions for adding/editing a payment dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.PaymentDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.PaymentDialog.SupportedFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.PaymentDialog.ApplicationToAddButtonId">
            <summary>
            Mapping of the 'Application' dropdown options to their 'Add' button id.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.PaymentDialog.SetFields(TechTalk.SpecFlow.TableRow)">
            <summary>
            Set the fields to their desired values.
            </summary>
            <param name="fields">Mapping of the field captions to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.PaymentDialog.AddApplication(TechTalk.SpecFlow.TableRow)">
            <summary>
            Add an application to the payment.
            </summary>
            <param name="application">Mapping of the field captions to their desired values in the various application types.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog">
            <summary>
            Class to handle the interactions for adding/editing a major giving plan dialog
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.AddDialogId">
            <summary>
            Add DialogId html ID
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.SupportedFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.SetPlanStartDate(System.String)">
            <summary>
            Set the 'Start date' of the plan.
            </summary>
            <param name="startDate">The date to set the 'Start date' to.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.SetPrimaryManagerStartDate(System.String)">
            <summary>
            Set the 'Start date' of the primary manager.
            </summary>
            <param name="startDate">The date to set the 'Start date' to.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.SetSecondaryManagerStartDate(System.String)">
            <summary>
            Set the 'Start date' of the secondary manager.
            </summary>
            <param name="startDate">The date to set the 'Start date' to.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.SetDetails(TechTalk.SpecFlow.TableRow)">
            <summary>
            The fields on the Details tab of the dialog.
            </summary>
            <param name="details">Mapping of the field captions to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.SetParticipants(TechTalk.SpecFlow.Table)">
            <summary>
            Set the participants grid values.
            Starts with the first row.
            </summary>
            <param name="participants">Table where each row represents a participant to add.
            A row is a mapping of the column captions to a single row's values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.SetOutline(System.String)">
            <summary>
            Set the plan outline.
            </summary>
            <param name="outline">The type of outline to use.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.SelectStepRow(System.Int32)">
            <summary>
            Select a row in the Steps grid.
            </summary>
            <param name="index">The index of the row to select.  The first row's index is 1.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.SetStepRow(TechTalk.SpecFlow.TableRow,System.Int32)">
            <summary>
            Set a step row's values.
            </summary>
            <param name="step">Mapping of the column captions to a single row's values.</param>
            <param name="index">The index of the row.  The first row's index is 1.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.InsertStep(TechTalk.SpecFlow.TableRow,System.Int32)">
            <summary>
            Select a row and insert a new step above it.
            </summary>
            <param name="step">Mapping of the column captions to a single row's values.</param>
            <param name="index">The index of the row to select before inserting.  The first row's index is 1.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.Save">
            <summary>
            Save the dialog.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MajorGivingPlanDialog.SetAddProspectPlanStartDate(System.String,System.String)">
            <summary>
            Set the 'Start date' of the 'Add prospect plan' dialog.  For whatever reason this requires custom logic
            from the default SetField.  Tab over or clicking on the input does NOT change its class to contain the
            focused attribute value.  This means it just continues trying to click the field and never sending it a value.
            
            If you unfocus from the web browser to another application at any point in this attempt, the field magically starts 
            to work and the focus attribute does get added from a click.  I believe this is an underlying product bug that is only
            discoverable through automation via a selenium change of field focus.  Stepping through the default setfield implementation. 
            causes it to work.  Manually executing the steps shows all the expected element attribute changes when inspecting the field.
            </summary>
            <param name="xPath">The XPath to find an element for setting the value to.</param>
            <param name="value">The desired value of the element.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.QuerySourceViewDialog">
            <summary>
            Base object for QuerySourceViewDialog functionality and interactions in BBCRM.  Inherits the Dialog base class.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.QuerySourceViewDialog.getXRecordTypeField">
            <summary>
            Constant XPath for the Record Field of a QuerySourceViewDialog.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.QuerySourceViewDialog.getXRecordTypeNameColumn(System.String)">
            <summary>
            Returns an XPath for the Name column of a QuerySourceViewDialog.
            
            </summary>
            <param name="name">The Name of the Column.</param>  
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.QuerySourceViewDialog.SetRecordType(System.String)">
            <summary>
            Set the record Type on a QuerySourceViewDialog.
            </summary>
            <param name="type">The type to select.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.QuerySourceViewDialog.SelectRecordTypeName(System.String)">
            <summary>
            Select the record Type on a QuerySourceViewDialog
            </summary>
            <param name="type">The type to be selected.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.RegistrantDialog">
            <summary>
            Class to handle the interactions for adding/editing an event registrant dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.RegistrantDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.RegistrantDialog.SupportedFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.RegistrantDialog.SetRegistrant(System.String)">
            <summary>
            Set the registrant.
            </summary>
            <param name="registrant"></param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.RegistrantDialog.SetRegistrants(TechTalk.SpecFlow.Table)">
            <summary>
            Set the registrants and registration options in the registration grid.
            </summary>
            <param name="registrants">Mapping of the column captions to a single row's values.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.SegmentDialog">
            <summary>
            Class to handle the interactions for adding/editing a segment dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.SegmentDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.SegmentDialog.SupportedFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.SegmentDialog.SetDetailsFields(TechTalk.SpecFlow.TableRow)">
            <summary>
            Set the fields on the 'Details' tab.
            </summary>
            <param name="fields">Mapping of the field captions to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.SegmentDialog.AddSelection(System.String)">
            <summary>
            Add a marketing selection to the segment.
            </summary>
            <param name="selection">The selection to add.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog">
            <summary>
            Base class to handle the interactions for search dialogs.  Inherits the Dialog base class.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.getXFirstNameField">
            <summary>
            Returns an Xpath for the FirstName Field on a SearchDialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.getXResultsBar">
            <summary>
            Returns an Xpath for the Results Tool bar on a SerachDialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.getXLastNameField">
            <summary>
            Returns an Xpath for the LastName Field on a SerachDialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.getXGridNameField">
            <summary>
            Returns an Xpath for the Grid Name Field on a SerachDialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.getXSelectedResultsRow">
            <summary>
            ConstantXPath value for finding a search dialog's selected row in the results pane.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.getXNoRecordsFound">
            <summary>
            Constant XPath value for checking if no search results were found on a search dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.getXSearchButton">
            <summary>
            Constant XPath value for finding a Search button WebElement.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.getXSelectButton">
            <summary>
            Constant XPath value for finding a Select button WebElement.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.getXSearchResultsGrid">
            <summary>
            Returns an Xpath for the Search Results Grid on a SerachDialog.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.Search">
            <summary>
            Press search on the SearchDialog.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.Select">
            <summary>
            Click the 'Select' button
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.CheckConstituentSearchResultsToolbarContains(System.String)">
            <summary>
            Checks that the search results tool bar message contains the specified string on a SearchDialog.
            Throws an exception on failure.
            
            </summary>
            <param name="expected">The string to check for.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.SetFirstNameToSearch(System.String)">
            <summary>
            Sets the value of the First Name search field.
            </summary>
            <param name="name">The text to set.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.SetLastNameToSearch(System.String)">
            <summary>
            Sets the value of the Last Name search field.
            </summary>
            <param name="name">The text to set.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.SelectFirstResult">
            <summary>
            Select the first result returned.
            If no results are returned, Cancel is clicked and an Exception is thrown.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.SearchDialog.CheckConstituentSearchResultsContain(System.String)">
            <summary>
            Checks that the search results contain the specified string on a SearchDialog.
            Throws an exception on failure.
            
            </summary>
            <param name="expected">The string to check for.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.AdHocQueryDialog">
            <summary>
            Class to handle the interactions for adding/editing an ad-hoc query dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AdHocQueryDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.AdHocQueryDialog.SupportedFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AdHocQueryDialog.ExpandNode(System.String)">
            <summary>
            Expand a tree node if it is collapsed.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AdHocQueryDialog.FilterBy(System.String)">
            <summary>
            Select a filter category in the 'Browse for fields in' panel
            </summary>
            <param name="filter">The complete filter path.  Nested filters should be provided as a complete
            path (i.e. 'Revenue\Constituent\Spouse'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AdHocQueryDialog.ApplyCriteria(TechTalk.SpecFlow.TableRow)">
            <summary>
            Set the fields on the apply criteria dialog that appears when adding a filter field.
            </summary>
            <param name="criteria">Mapping of the unique field ids to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AdHocQueryDialog.AddFilterField(System.String,TechTalk.SpecFlow.TableRow)">
            <summary>
            Select a field and add it as a filter field uing the provided criteria.
            </summary>
            <param name="fieldCaption">The field to add.</param>
            <param name="criteria">Mapping of the unique field ids to their desired values for the criteria dialog.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AdHocQueryDialog.AddOutputField(System.String)">
            <summary>
            Select a field and add it as an output field to display.
            </summary>
            <param name="fieldCaption">The field to add.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AdHocQueryDialog.SetSaveOptions(TechTalk.SpecFlow.TableRow)">
            <summary>
            Set the values on the 'Set save options' tab
            </summary>
            <param name="options">Dictionary mapping of the field captions to their desired values</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.AdHocQueryDialog.SaveAndClose">
            <summary>
            Click the 'Save and close' button
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.MultiLevelEventDialog">
            <summary>
            Class to handle the interactions for adding/editing an add a multi-level event dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.MultiLevelEventDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MultiLevelEventDialog.getXAddedEvent(System.String)">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MultiLevelEventDialog.SetTemplate(System.String)">
            <summary>
            Set the 'Event management template' dropdown.
            </summary>
            <param name="templateName">The name of the template to set.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MultiLevelEventDialog.AddExistingEvent(System.String)">
            <summary>
            Add an event to the multi-level event.  If an event if currently selected in
            the hierachy, then the new event will be added a child to the selected event.
            </summary>
            <param name="eventName">The name of the event to add.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MultiLevelEventDialog.AddChildEvent(System.String,System.String)">
            <summary>
            Add an event to the multi-level event as a child to a specified event
            already added to the multi-level event.
            </summary>
            <param name="eventName">The name of the event to add.</param>
            <param name="parentEventName">The name of the parent event.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.MultiLevelEventDialog.CopyFrom(System.String,System.String,System.String)">
            <summary>
            Select a parent event to add a new child event to.  The child event will be copied from an existing event.
            </summary>
            <param name="copyFromEventName">The name of the event to copy.</param>
            <param name="parentEventName">The name of the parent event to add the new event as a child to.</param>
            <param name="newEventName">The name to set for the new event.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Dialogs.TaskDialog">
            <summary>
            Class to handle the interactions for adding/editing a task dialog.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.TaskDialog.DialogIds">
            <summary>
            Static list of supported unique dialog id.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.TaskDialog.SupportedFields">
            <summary>
            Static mapping of supported field captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Dialogs.TaskDialog.SupportedRemindersGridFields">
            <summary>
            Static mapping of supported Grid column captions to CrmField objects encapsulating all relevant variables
            needed to set the field's value.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.TaskDialog.SetFields(TechTalk.SpecFlow.TableRow)">
            <summary>
            Set the fields to their desired values.
            </summary>
            <param name="fields">Mapping of the field captions to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Dialogs.TaskDialog.SetReminders(TechTalk.SpecFlow.Table)">
            <summary>
            Set the reminders or the task.  Always starts at the first row, replacing whatever
            existing rows might exist.
            </summary>
            <param name="reminders">Table where each row represents a reminder to add.  
            A row is a mapping of the 'Reminders' grid's column captions to the row's values.  </param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.AnalysisFunctionalArea">
            <summary>
            Class to handle interactions for the 'Analysis' functional area.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.FunctionalArea">
            <summary>
            Utility methods for operations on a functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.FunctionalArea.getXFaLink(System.String)">
            <summary>
            Returns an Xpath for a Functional Area link.
            </summary>
            <param name="linkText">The Link text to use.</param>
            <returns></returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.FunctionalArea.getXAddMenu(System.String,System.String)">
            <summary>
            Formats an XPath to handle an Add menu.  
            </summary>
            <param name="addId">The unique ID in the HTML Table element's id. i.e. 'ADDNEWGROUP'</param>
            <param name="caption">The caption of the add menu.  Defaults to 'Add new'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.FunctionalArea.getXFunctionalAreaTask(System.String,System.String)">
            <summary>
            Formats the unique XPath for finding a task on a functional area page
            using the grouping caption and task caption.
            </summary>
            <param name="groupCaption">The caption of the Grouping header that the task belongs to.</param>
            <param name="taskName">The name of the task to interact with.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.FunctionalArea.getXFunctionalAreaTask(System.String)">
            <summary>
            Formats an XPath for finding a task on a functional area page
            using the task link's caption.
            </summary>
            <param name="taskName">The name/caption of the task.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.FunctionalArea.OpenLink(System.String)">
            <summary>
            Click on the functional area link.
            </summary>
            <param name="caption">The caption of the task link.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.FunctionalArea.OpenLink(System.String,System.String)">
            <summary>
            Click on the functional area link.
            </summary>
            <param name="groupCaption">The group header caption of the task.</param>
            <param name="linkCaption">The caption of the task link.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.FunctionalArea.OpenLinkToPanel(System.String,System.String,System.String)">
            <summary>
            Click on the functional area link that navigates to a panel.
            </summary>
            <param name="groupCaption">The group header caption of the task.</param>
            <param name="linkCaption">The caption of the task link.</param>
            <param name="headerText">The header caption of the desired panel to navigate to.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.AnalysisFunctionalArea.OpenQueryPanel">
            <summary>
            TODO - THIS IS A CUSTOMIZATION IMPLEMENTATION FOR BHF AND SHOULD BE MOVED TO THEIR TEST SOLUTION
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.AnalysisFunctionalArea.InformationLibrary(System.String,System.String)">
            <summary>
            Navigate to the 'Information Library' Panel
            </summary>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Information library".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Information library".</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.ConstituentsFunctionalArea">
            <summary>
            Class to handle interactions for the 'Constituents' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.ConstituentsFunctionalArea.OpenConstituentSearchDialog">
            <summary>
            Open the Constituent search dialog
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.ConstituentsFunctionalArea.ConstituentExists(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Determine if at least a single matching constituent can be found based on the provided
            search field value and select it.  Selects the first returned result, or cancels the search 
            dialog if no results are found.
            </summary>
            <param name="fieldValue">The desired value of the search criteria field.</param>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Constituents".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Constituent search".</param>
            <param name="dialogId">The unique id of the search dialog.  i.e. 'UniversityofOxfordConstituentSearch'  
            Defaults to "ConstituentSearchbyNameorLookupID".</param>
            <param name="fieldId">The unique id of the search dialog field.  i.e. 'LOOKUPID'  Defaults to "KEYNAME".</param>
            <returns>True if at least one matching element is found, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.ConstituentsFunctionalArea.AddAnIndividual(System.String,System.String)">
            <summary>
            Open the dialog to add an individual.
            </summary>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Individuals and households".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Add an individual".</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.ConstituentsFunctionalArea.AddAnIndividual(TechTalk.SpecFlow.TableRow,System.String,System.String)">
            <summary>
            Open the dialog to add an individual, set the fields to the provided values, and save.
            </summary>
            <param name="individual">Mapping of the 'Add an individual' dialog's field captions to their desired values.</param>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Individuals and households".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Add an individual".</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.ConstituentsFunctionalArea.AddAnIndividual(TechTalk.SpecFlow.TableRow,System.String,System.String,System.Int32)">
            <summary>
            Open the dialog to add an individual, set the fields to the provided values, and save.
            </summary>
            <param name="individual">Mapping of the 'Add an individual' dialog's field captions to their desired values.</param>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Individuals and households".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Add an individual".</param>
            <param name="timeout">Time to wait for operation, default is 120 seconds.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.ConstituentsFunctionalArea.ConstituentSearch(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Search for a constituent and navigate to the first returned result.  An Exception is thrown if
            no results are found.
            </summary>
            <param name="fieldValue">The desired value of the search criteria field.</param>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Constituents".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Constituent search".</param>
            <param name="dialogId">The unique id of the search dialog.  i.e. 'UniversityofOxfordConstituentSearch'  
            Defaults to "ConstituentSearchbyNameorLookupID".</param>
            <param name="fieldId">The unique id of the search dialog field.  i.e. 'LOOKUPID'  Defaults to "KEYNAME".</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.EventsFunctionalArea">
            <summary>
            Class to handle interactions for the 'Events' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.EventsFunctionalArea.AddEvent">
            <summary>
            Open the dialog to add an event.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.EventsFunctionalArea.AddEvent(TechTalk.SpecFlow.TableRow)">
            <summary>
            Open the dialog to add an event, set the fields to their desired values, and save.
            </summary>
            <param name="eventValue">Dictionary mapping field caption keys to their values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.EventsFunctionalArea.AddMultiEvent">
            <summary>
            Open the dialog for adding a 'Multi-level event'.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.EventsFunctionalArea.EventSearch(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Search for an event and select the first matching record.
            </summary>
            <param name="fieldValue">The desired value of the search criteria field.</param>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Fundraising events".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Event search".</param>
            <param name="dialogId">The unique id of the search dialog.  i.e. 'UniversityofOxfordConstituentSearch'  
            Defaults to "EventSearch".</param>
            <param name="fieldId">The unique id of the search dialog field.  i.e. 'LOOKUPID'  Defaults to "NAME".</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.EventsFunctionalArea.Locations(System.String,System.String)">
            <summary>
            Navigate to the 'Locations' panel.
            </summary>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Fundraising events".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Locations".</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.EventsFunctionalArea.EventManagementTemplates(System.String,System.String)">
            <summary>
            Navigate to the 'Event Management Templates' panel.
            </summary>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Fundraising events".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Event management templates".</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.EventsFunctionalArea.CollapseCalendar">
            <summary>
            Collapse the Event Calendar if it is expanded and wait for the collapse to complete.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.FundraisingFunctionalArea">
            <summary>
            Class to handle interactions for the 'Fundraising' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.FundraisingFunctionalArea.DesignationExists(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Check if a designation exists and navigate to it if so.
            </summary>
            <param name="designation">The name of the designation.</param>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Fundraising".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Designation search"</param>
            <param name="dialogId">The unique id of the search dialog.  i.e. 'UniversityofOxfordConstituentSearch'  
            Defaults to "DesignationSearch".</param>
            <param name="fieldId">The unique id of the search dialog field.  i.e. 'LOOKUPID'  Defaults to "COMBINEDSEARCH".</param>
            <returns>True if the designation exists, false otherwise.</returns>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.HomeFunctionalArea">
            <summary>
             Class to handle interactions for the 'Home' functional area.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.MarketingAndCommFunctionalArea">
            <summary>
             Class to handle interactions for the 'Marketing and Communications' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.MarketingAndCommFunctionalArea.Receipts(System.String,System.String)">
            <summary>
            Navigate to the 'Receipts' panel.
            </summary>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Donor relations".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Receipts"</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.MarketingAndCommFunctionalArea.MarketingAcknowledgements(System.String,System.String)">
            <summary>
            Navigate to the 'Marketing Acknowledgements' panel.
            </summary>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Marketing efforts".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Marketing acknowledgements"</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.MarketingAndCommFunctionalArea.Segments(System.String,System.String)">
            <summary>
            Navigate to the 'Segments' panel.
            </summary>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Acquisition and segmentation".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Segments"</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.MarketingAndCommFunctionalArea.Packages(System.String,System.String)">
            <summary>
            Navigate to the 'Packages' panel and then navigate to the 'View packages' panel.
            </summary>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Packages".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Packages"</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.ProspectsFunctionalArea">
            <summary>
            Class to handle interactions for the 'Prospects' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.ProspectsFunctionalArea.MajorGivingSetup(System.String,System.String)">
            <summary>
            Navigate to the 'Major Giving Setup' panel.
            </summary>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Configuration".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Major giving setup".</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.ProspectsFunctionalArea.CollapseResearchLists">
            <summary>
            Collapse the Research Lists Calendar if it is expanded and wait for the collapse to complete.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.RevenueFunctionalArea">
            <summary>
            Class to handle interactions for the 'Revenue' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.RevenueFunctionalArea.AddAPayment(System.String,System.String)">
            <summary>
            Open the dialog to add a payment.
            </summary>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Transactions".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Add a payment".</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.RevenueFunctionalArea.AddAPledge(System.String,System.String)">
            <summary>
            Open the dialog to add a pledge.
            </summary>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Transactions".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Add a pledge".</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.RevenueFunctionalArea.AddAPledge(TechTalk.SpecFlow.TableRow,System.String,System.String)">
            <summary>
            Open the dialog to add a pledge, set its values, and save.
            </summary>
            <param name="pledge">Mapping of the 'Add a pledge' dialog's field captions to their desired values.</param>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Transactions".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Add a pledge".</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.RevenueFunctionalArea.BatchEntry(System.String,System.String)">
            <summary>
            Navigate to the 'Batch Entry' panel
            </summary>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Transactions".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Batch entry".</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.RevenueFunctionalArea.PledgeSubtypes(System.String,System.String)">
            <summary>
            Navigate to the 'Pledge Subtypes' panel
            </summary>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Configuration".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Pledge subtypes".</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.RevenueFunctionalArea.TransactionSearchByConstituent(System.String,System.String,System.String)">
            <summary>
            Search for a revenue record by all records associated with a constituent
            and select the first returned result.
            </summary>
            <param name="constituent">The last name of the constituent.</param>
            <param name="groupCaption">The group header caption of the task.  Defaults to "Transactions".</param>
            <param name="taskCaption">The link caption of the task.  Defaults to "Transaction search".</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.AdHocQueryPanel">
            <summary>
            Class to handle interactions for the 'Ad-hoc Query' panel.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.Panel">
            <summary>
            Base class to handle interactions for panels.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.Panel.getXTabsBarRightScroller">
            <summary>
            Constant XPath for getting the right scroller on the top Tab bar.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.Panel.getXTabsBar">
            <summary>
            Constant XPath for getting an element that indicates the top Tab bar has loaded an active Tab.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.Panel.getXTabsBarActiveTab">
            <summary>
            Constant XPath for getting an element corresponds to the currently active Tab in the top Tab bar.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.Panel.getXInnerTabsBar">
            <summary>
            Constant XPath for getting an element that indicates an inner Tab bar has loaded an active Tab.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.Panel.getXEventSearchResultsGridNameFields">
            <summary>
            XPath for Event search results grid name fields
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.Panel.getxEventSearchResultsBar">
            <summary>
            Xpath for Event search results bar
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSearchResultsGrid">
            <summary>
            Xpath for search results grid
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXPanelTab(System.String)">
            <summary>
            Xpath for tab specified by the input text
            </summary>
            <param name="text">The tab text</param>
            <returns>formated XPath for the tab text passed in</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSpan(System.String,System.String)">
            <summary>
            Given the unique HTML element ids of a dialog and span, return a unique identifier XPath
            to find the SPAN field.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. '_EventSummaryViewForm3'</param>
            <param name="spanId">The SPAN element's unique id identifier - i.e. '_LOCATION_value'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXDatalistSpan(System.String,System.String)">
            <summary>
            XPath for Datalist Span based on dialog and span name
            </summary>
            <param name="dialogId">DialogID</param>
            <param name="spanId">Html span ID</param>
            <returns>Formated XPath</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXDiv(System.String,System.String)">
            <summary>
            Given the unique HTML element ids of a dialog and div, return a unique identifier XPath
            to find the DIV field.
            </summary>
            <param name="dialogId">The dialog's unique id identifier - i.e. '_individualSpouseBusinessAddForm'</param>
            <param name="divId">The DIV element's unique id identifier - i.e. '_LASTNAME_value'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSectionDatalistPageIndexButtons(System.String)">
            <summary>
            Format an XPath to find all top-right indexing buttons for a section's datalist.
            </summary>
            <param name="sectionCaption">The caption of the section.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSectionDatalistCurrentPageIndex(System.String)">
            <summary>
            Format an XPath to find the top-right index DIV whose text will be the current page index of a section's datalist.
            </summary>
            <param name="sectionCaption">The caption of the section</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSelectedDatalistRowButton(System.String)">
            <summary>
            Format an XPath for handling a button on the selected datalist row.
            </summary>
            <param name="caption">The caption of the button.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSelectedDatalistRowLinkByAction(System.String)">
            <summary>
            Format an XPath for handling a link on the selected datalist row.
            </summary>
            <param name="action">The tooltip caption of the action displayed when hovering over the link. i.e. 'Go to plan:'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXDatalistRowLinkByActionAndCaption(System.String,System.String)">
            <summary>
            Format an xPath for handling a link on any datalist row.
            </summary>
            <param name="action">The result of the action. i.e. 'Go to segment:'</param>
            <param name="caption">The caption of the link.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSelectedDatalistRowLinkById(System.String)">
            <summary>
            Format an XPath for handling a link on the selected datalist row.
            </summary>
            <param name="id">The id of the link that is the value of the 'data-fieldid' attribute.  i.e. 'PLANNAME'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSelectedDatalistRowLinkByCaption(System.String)">
            <summary>
            Format an XPath for handling a link on the selected datalist row.
            </summary>
            <param name="caption">The caption text of the link.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXPanelHeaderLink(System.String)">
            <summary>
            Format an XPath for finding a link based on its caption located in the header of a panel.
            </summary>
            <param name="linkCaption"></param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXPanelHeaderLink">
            <summary>
            Format an XPath for finding a context link located in the header of a panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXPanelHeader(System.String)">
            <summary>
            Formatter for an XPath to find a panel header with a specific image type.
            </summary>
            <param name="imageName">Unique name of the image associated with the panel header.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXPanelHeader">
            <summary>
            Generic XPath to get the panel header.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXPanelHeaderByText(System.String)">
            <summary>
            Format an XPath to find a panel header containing the provided text.
            </summary>
            <param name="text">The value to check for in the panel header.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXDataListColumnValue(System.Int32,System.String)">
            <summary>
            Given the DOM index of a datalist column and the value for that column, return an XPath
            to append to a datalist XPath for finding that value in the requested column index.
            
            No element will be found if the value does not exist in this column.
            </summary>
            <param name="columnIndex">The DOM index for the TD element representing the desired column.</param>
            <param name="columnValue">The value corresponding the provided column.  </param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSectionDatalistRows(System.String)">
            <summary>
            XPath to get the TR datalist rows of a section.
            </summary>
            <param name="sectionCaption">The caption of the section that the datalist belongs to.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSectionDatalistRow(System.String,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Formats a unique XPath to find a single datalist row.
            </summary>
            <param name="sectionCaption">The caption of the section that the datalist belongs to.</param>
            <param name="columnCaptionToIndex">Mapping of the datalist column captions to their DOM TD index.</param>
            <param name="columnCaptionToValue">Mapping of the datalist column captions to their values in a single row.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXViewForm(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Format an XPath to find a single view form in a section.
            
            Field values will be checked to CONTAIN (not match) the provided values.
            </summary>
            <param name="sectionCaption">The caption of the section that the view form belongs to.</param>
            <param name="viewFormId">The unique id for the type of view form to look for.  i.e. 'RevenueTransactionDetailViewForm'</param>
            <param name="viewFormValues">Mapping of a single view form's captions (excluding the colon) to their desired value.
            Field values will be checked to CONTAIN (not match) the provided values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSectionViewFormSpan(System.String,System.String)">
            <summary>
            Format an XPath to append to a section view form that has an item with the provided
            caption and CONTAINING (not matching) the value.
            
            No element will be found if the caption does not exist with this value.
            </summary>
            <param name="caption">The caption of the view form field.</param>
            <param name="value">The expected value associated with the provided caption.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSectionViewForm(System.String,System.String)">
            <summary>
            Format an XPath for a section's view form root.
            </summary>
            <param name="secionCaption">The caption of the section.</param>
            <param name="viewFormId">The unique id for the type of view form to look for.  i.e. 'RevenueTransactionDetailViewForm'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSectionDatalistColumnHeaders(System.String)">
            <summary>
            XPath to get the TR row of column headers for a section's datalist.
            </summary>
            <param name="sectionCaption">The caption of the section that the datalist belongs to.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXDuplicateSectionDatalistColumnHeaders(System.String)">
            <summary>
            XPath to get the TR row of column headers for a section's datalist when multiple sections with matching
            captions exists for a single panel on different tabs.
            </summary>
            <param name="sectionCaption">The caption of the section that the datalist belongs to.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSectionAddButton(System.String,System.String)">
            <summary>
            Given the caption header of a section, formats an XPath for handling the Add
            button.
            </summary>
            <param name="sectionName">The caption head of the section.</param>
            <param name="addCaption">The caption of the button defaulting to "Add".  
            A unique caption value can be specified if the button caption is not "Add".</param>
            <returns></returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSection(System.String)">
            <summary>
            Given the caption header of a section, return a unique identifier XPath
            for handling the section WebElement.
            </summary>
            <param name="sectionName">The caption header of the section to reference</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXTab(System.String)">
            <summary>
            Formats an XPath for a Tab in a top Tab bar.
            </summary>
            <param name="caption">The caption of the tab.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXInnerTab(System.String)">
            <summary>
            Formats an XPath for a Tab in an inner Tab bar.
            </summary>
            <param name="caption">The caption of the tab.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSectionExpandButton(System.String)">
            <summary>
            Formats an XPath to get the expand/collpase button of a section
            </summary>
            <param name="sectionCaption">The caption of the section.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXSectionWidget(System.String,System.String)">
            <summary>
            Returns an XPath to get the DIV parent of the Research Lists UI widget whose 'stlye' attribute contains visibility info about the widget.
            </summary>
            <param name="sectionCaption">The caption of the section.</param>
            <param name="widgetId">A unique part of the widget element's id in the DOM.  i.e. 'ResearchGroupNavigationViewDataForm'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.CollapseSection(System.String,System.String)">
            <summary>
            Collapse a section if it is expanded and a collapse/expand button exists.
            </summary>
            <param name="sectionCaption">The caption of the section</param>
            <param name="widgetId">A unique part of the widget element's id in the DOM.  i.e. 'ResearchGroupNavigationViewDataForm'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.SelectSectionDatalistRow(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.Generic.IDictionary{System.String,System.Int32})">
            <summary>
            Select a row in a section's datalist.  
            If the row is already selected, no action is taken.
            </summary>
            <param name="rowValues">Mapping of the column caption to the single row's values.</param>
            <param name="sectionCaption">The caption of the section.</param>
            <param name="columnCaptionToIndex">Mapping of the column captions to their TD index.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.SelectSectionDatalistRow(TechTalk.SpecFlow.TableRow,System.String,System.Collections.Generic.IDictionary{System.String,System.Int32})">
            <summary>
            Select a row in a section's datalist.  
            If the row is already selected, no action is taken.
            </summary>
            <param name="rowValues">Mapping of the column caption to the single row's values.</param>
            <param name="sectionCaption">The caption of the section.</param>
            <param name="columnCaptionToIndex">Mapping of the column captions to their TD index.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.SelectSectionDatalistRow(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Select a row in a section's datalist.  If the row is already selected, no action is taken.
            </summary>
            <param name="rowValues">Dictionary mapping of the column caption to the single row's values.   Keys represent column captions.</param>
            <param name="sectionCaption">The caption of the section.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.SelectSectionDatalistRow(TechTalk.SpecFlow.TableRow,System.String)">
            <summary>
            Select a row in a section's datalist.  If the row is already selected, no action is taken.
            </summary>
            <param name="row">Mapping of the column caption to the single row's values.</param>
            <param name="sectionCaption">The caption of the section.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.SectionDatalistRowExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Check whether a row exists in a section's datalist.
            </summary>
            <param name="rowValues">Dictionary mapping the datalist columns to a single row's values.  Keys represent column captions.</param>
            <param name="sectionCaption">The caption of the section.</param>
            <returns>True if the row exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.SectionDatalistRowExists(TechTalk.SpecFlow.TableRow,System.String)">
            <summary>
            Check whether a row exists in a section's datalist.
            </summary>
            <param name="row">Mapping of the datalist columns to a single row's values.</param>
            <param name="sectionCaption">The caption of the section.</param>
            <returns>True if the row exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.SectionDatalistRowExists(TechTalk.SpecFlow.TableRow,System.String,System.Collections.Generic.IDictionary{System.String,System.Int32})">
            <summary>
            Check whether a row exists in a section's datalist.
            </summary>
            <param name="row">Mapping of the datalist columns to a single row's values.</param>
            <param name="sectionCaption">The caption of the section.</param>
            <param name="columnCaptionToIndex">Mapping of the column captions to their TD index.</param>
            <returns>True if the row exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.SectionDatalistRowExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.Generic.IDictionary{System.String,System.Int32})">
            <summary>
            Check whether a row exists in a section's datalist.
            </summary>
            <param name="rowValues">Dictionary mapping the datalist columns to a single row's values.  Keys represent column captions.</param>
            <param name="sectionCaption">The caption of the section.</param>
            <param name="columnCaptionToIndex">Mapping of the column captions to their TD index.</param>
            <returns>True if the row exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.SectionViewFormExists(TechTalk.SpecFlow.TableRow,System.String,System.String)">
            <summary>
            Check whether a view form exists in a section CONTAINING (not identically matching) the provided values.
            </summary>
            <param name="viewForm">Mapping of the view form captions (excluding the colon) to a single view form's values.</param>
            <param name="sectionCaption">The caption of the section.</param>
            <param name="viewFormId">The unique id for the type of view form to look for.  i.e. 'RevenueTransactionDetailViewForm'</param>
            <returns>True if the view form exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.SectionViewFormExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Check whether a view form exists in a section CONTAINING (not identically matching) the provided values.
            </summary>
            <param name="viewForm">Mapping of the view form captions (excluding the colon) to a single view form's values.</param>
            <param name="sectionCaption">The caption of the section.</param>
            <param name="viewFormId">The unique id for the type of view form to look for.  i.e. 'RevenueTransactionDetailViewForm'</param>
            <returns>True if the view form exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.GridRowExists(TechTalk.SpecFlow.TableRow,System.String)">
            <summary>
            Check if a grid/datalist row exists.
            </summary>
            <param name="row">Mapping of the grid/datalist column captions to a single row's values.</param>
            <param name="gridId">The unique id of the grid/datalist.  i.e. '_DESIGNATIONS_value'</param>
            <returns>True if the row exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.GridRowExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Check if a grid/datalist row exists.
            </summary>
            <param name="row">Dictionary mapping the grid/datalist columns to a single row's values.  Keys represent column captions.</param>
            <param name="gridId">The unique id of the grid/datalist.  i.e. '_DESIGNATIONS_value'</param>
            <returns>True if the row exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXGridRow(System.String,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Formats an XPath to find a single row in a grid/datalist.
            </summary>
            <param name="gridId">The unique id of the grid/datalist.  i.e. '_DESIGNATIONS_value'</param>
            <param name="columnCaptionToIndex">Mapping of the column captions to their index in the TD.</param>
            <param name="columnCaptionToValue">Mapping of the column captions to a single row's values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXGridRows(System.String)">
            <summary>
            Format an XPath to find the TR rows of a grid/datalist.
            </summary>
            <param name="gridId">The unique id of the grid/datalist.  i.e. '_DESIGNATIONS_value'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXGridHeaders(System.String)">
            <summary>
            Format an XPath to find the TR header row of a grid/datalist that contains the column captions.
            </summary>
            <param name="gridId">The unique id of the grid/datalist.  i.e. '_DESIGNATIONS_value'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.getXGrid(System.String)">
            <summary>
            Format an XPath to find a grid/datalist.
            </summary>
            <param name="gridId">The unique id of the grid/datalist.  i.e. '_DESIGNATIONS_value'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.SelectTab(System.String)">
            <summary>
            Select a Tab from the top Tab bar.
            </summary>
            <param name="caption">The caption of the tab.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.SelectInnerTab(System.String)">
            <summary>
            Select a Tab from an inner Tab bar.
            </summary>
            <param name="caption">The caption of the tab.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.OpenTab(System.String)">
            <summary>
            Open tab for the passed in string
            </summary>
            <param name="caption">The name of the tab to be opened</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.ClickSectionAddButton(System.String,System.String)">
            <summary>
            Click the 'Add' button of a section.
            </summary>
            <param name="sectionCaption">The caption of the section that the button belongs to.</param>
            <param name="addButtonCaption">The caption of the button to click.  Defaults to 'Add'.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.IsPanelHeader(System.String)">
            <summary>
            Check if the panel header's text matches the expected value.
            </summary>
            <param name="expectedValue">The expected value of the header.</param>
            <returns>True if the text of the header matches the provided expected value, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.IsPanelType(System.String)">
            <summary>
            Check if the panel header's image contains the provided image type.
            </summary>
            <param name="panelImage">The unique image name of the panel.  i.e. 'individual.png'</param>
            <returns>True if the panel header image contains the provided image type, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.WaitForPanelType(System.String)">
            <summary>
            Wait until the panel header's image contains the provided image type.
            A WebDriverTimeoutException is thrown is no displayed panel header loads with the image.
            </summary>
            <param name="panelImage">The unique image name of the panel.  i.e. 'individual.png'</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.WaitForPanelHeaderNotContain(System.String)">
            <summary>
            Wait the default time for the panel header to not contain the provided value.
            </summary>
            <param name="header">The value to wait until not displayed in the header.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.ExpandRow(System.String)">
            <summary>
            Expand a row if it is not already expanded.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.AdditionalDatalistPagesExist(System.String)">
            <summary>
            Check if additional pages exist for a datalist to load.  If so load the page.
            </summary>
            <returns>Returns true if an additional page was found and clicked, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.Panel.CheckGridResultsContain(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Check grid results contain items in parameters
            </summary>
            <param name="expected">?</param>
            <param name="XnameField">?</param>
            <param name="XresultsBar">?</param>
            <param name="resultsBarText">?</param>
            <param name="XresultsGrid">?</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.AdHocQueryPanel.IsPanelHeader(System.String)">
            <summary>
            Check if the Ad-Hoc Query Panel has the provided name in the header.
            </summary>
            <param name="queryName">The value to check for in the header.</param>
            <returns>True if the header contains the value, false otherwise.</returns>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.BatchEntryPanel">
            <summary>
            Class to handle interactions for the 'Batch Entry' panel.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.BatchEntryPanel.getXSearchInput">
            <summary>
            Get Xpath for search input html field
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.BatchEntryPanel.AddBatch(System.String)">
            <summary>
            Create a new batch using the specified template and load the batch dialog.
            </summary>
            <param name="batchTemplate">The template to use for the new batch.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.BatchEntryPanel.AddBatch(System.String,System.String)">
            <summary>
            Create a new batch with the specified template and description.
            </summary>
            <param name="batchTemplate">The template to use for the new batch.</param>
            /// <param name="description">The description to use for the new batch.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.BatchEntryPanel.UncommittedBatchExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a batch exists as a row in the uncommitted batches datalist.
            </summary>
            <param name="batch">Mapping of the column captions to a single row's values.</param>
            <returns>True if the batch exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.BatchEntryPanel.SelectUncommittedBatch(TechTalk.SpecFlow.TableRow)">
            <summary>
            Select an uncommitted batch.
            </summary>
            <param name="batchRow">Mapping of the column captions to a single row's values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.BatchEntryPanel.CommitSelectedBatch">
            <summary>
            Commit the currently selected batch.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.BusinessProcess">
            <summary>
            Base class to handle interactions for the 'Business Process' panel.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.BusinessProcess.getXCommitStatus">
            <summary>
            Get a formatted xPath for an element whose text represents the commit status of the business process.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.BusinessProcess.getXRecordsProcessed">
            <summary>
            Get a formatted xPath for an element whose test represents the number of records processed for the business process.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BusinessProcess.IsCompleted">
            <summary>
            Wait for the business process to complete and check if the status finished as 'Completed'.
            </summary>
            <returns>True if the business process completes without errors or exceptions, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BusinessProcess.IsCompleted(System.Int32)">
            <summary>
            Wait for the business process to complete and check if the status finished as 'Completed'.
            </summary>
            <returns>True if the business process completes without errors or exceptions, false otherwise.</returns>
            <param name="timeout">Time to wait for operation, default is 120 seconds.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BusinessProcess.IsNumRecordsProcessed(System.Int32)">
            <summary>
            Check for the total number of records processed.
            </summary>
            <param name="numRecords">The expected number of total records processed by the business process.</param>
            <returns>True if the posted number of total processed records equals the provided expected amount, false otherwise.</returns>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.MarketingAcknowledgementBusinessProcess">
            <summary>
            Class to handle interactions for the 'Marketing Acknowledgement Business Process' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.MarketingAcknowledgementBusinessProcess.IsNumRecordsProcessed(System.Int32)">
            <summary>
            Check for the number of records successfully processed.
            </summary>
            <param name="numRecords">The number of records to check for.</param>
            <returns>True if the provided number matches the listed amount of successfully processed records, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.MarketingAcknowledgementBusinessProcess.IsCompleted">
            <summary>
            Wait for the the business process to finish and validate if it finished with a "Completed" status.
            </summary>
            <returns>True if the process completed without errors or exceptions, false otherwise.</returns>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.ReceiptBusinessProcess">
            <summary>
            Class to handle interactions for the 'Receipt Business Process' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.ReceiptBusinessProcess.IsCompleted">
            <summary>
            Wait for the the business process to finish and validate if it finished with a "Completed" status.
            </summary>
            <returns>True if the process completed without errors or exceptions, false otherwise.</returns>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel">
            <summary>
            Class to handle interactions for the 'Constituent' panel.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.getXYesReallyDelete">
            <summary>
            XPath for Delete Yes action
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.getXNotification(System.String)">
            <summary>
            XPath to find a notification on a Constituent panel.
            </summary>
            <param name="noteTitle">Part of the title that the notification must have.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.IsTitle(System.String)">
            <summary>
            Check the Title of the constituent.
            </summary>
            <param name="title">The Title value to check for.</param>
            <returns>True if the provided value is the constituent's Title, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.IsStateAddress(System.String)">
            <summary>
            Check the State address of the constituent.
            </summary>
            <param name="state">The State abbreviation to check for.</param>
            <returns>True if the provided value is the constituent's state, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.IsBirthDate(System.String)">
            <summary>
            Check the Birth Date of the constituent.
            </summary>
            <param name="birthDate">The birth date value to check for.</param>
            <returns>True if the provided value is the constituent's birth date, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.IsLastName(System.String)">
            <summary>
            Checks if the constituent record panel has the provided last name.
            </summary>
            <param name="lastName">The last name to check for.</param>
            <returns>True if the constituent has the provided last name, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.IsConstituentPanelHeader(System.String)">
            <summary>
            Check if the Constituent panel header has the expected text.
            </summary>
            <param name="expectedText">The expected text of the header to check for.</param>
            <returns>True if the header has the expected text, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.ConstituencyExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a constituency exists on the 'Personal Info' => 'Constituencies' tab.
            </summary>
            <param name="values">Mapping of column captions to a row's values.</param>
            <returns>True if the constituency exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.GetConstituentTypeText">
            <summary>
            Return the Constituent Type text from the TopBar on the ConstituentPanel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.SelectInfoTab">
            <summary>
            Select Info tab based on constituent type Text in the Panel Header
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.DeleteConstituency(System.String)">
            <summary>
            Delete constituency by constituency
            </summary>
            <param name="constituency">Constituency to be deleted</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.AddConstituency(System.String,TechTalk.SpecFlow.TableRow)">
            <summary>
            Add a constituency under the 'Personal Info' => 'Constituencies' tab.
            </summary>
            <param name="constituency">The type of constituency to add (i.e. 'Staff')</param>
            <param name="values">Mapping of the field captions and desired values to set on the 'Add constituency' dialog.  
            Defaults to null where no values are set.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.AddNote(TechTalk.SpecFlow.TableRow)">
            <summary>
            Add a Note in the 'Documentation and Interactions' => 'Constituent Documentation' tab
            </summary>
            <param name="note">Mapping of the field captions for the 'Add a note' dialog to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.SelectNote(System.String)">
            <summary>
            Select a Note.
            </summary>
            <param name="noteTitle">The value of the 'Title' column for the desired row.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.AddNotification(System.String,TechTalk.SpecFlow.TableRow)">
            <summary>
            Add a Notification to the specified Note in the 'Documentation and Interactions' => 'Constituent Documentation' tab.
            </summary>
            <param name="noteTitle">The 'Title' of the Note to add a notification to.</param>
            <param name="notification">Mapping of the field captions for the 'Add notification' dialog to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.NotificationExists(System.String)">
            <summary>
            Check if a Notification exists for the provided Note.
            </summary>
            <param name="noteTitle">The 'Title' of the Note.</param>
            <returns>True if the notification exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.TeamRoleExists(System.String)">
            <summary>
            Check if a Team Member Role exists when adding a Prospect team member through the
            'Add a prospect team member' dialog.
            </summary>
            <param name="teamRole">The name of the team role to check for.</param>
            <returns>True if the team role exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.AddTeamRole(System.String)">
            <summary>
            Add Team Member Role through the 'Add a prospect team member' dialog.
            </summary>
            <param name="teamRole">The name of the team role to add.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.AddTeamMember(TechTalk.SpecFlow.TableRow)">
            <summary>
            Add a prospect team member from the 'Prospect' => 'Prospect Team' tab.
            
            Constituent may need to have the 'Prospect' constituency for this tab to be displayed.
            </summary>
            <param name="teamMember">Mapping of the field captions for the 'Add a prospect team member' dialog to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.TeamMemberExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a prospect team member exists.
            </summary>
            <param name="teamMember">Mapping of column captions to a row's values.</param>
            <returns>True if the team member exists, false otherwise</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.AddMajorGivingPlan(TechTalk.SpecFlow.TableRow,System.String)">
            <summary>
            Add a major giving plan to a prospect constituent.
            </summary>
            <param name="detailFields">Mapping of the 'Details' tab field captions to their desired values.</param>
            <param name="outline">The outline to use.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.GoToPlan(System.String)">
            <summary>
            Navigate the plan panel of an existing plan for the constituent.
            </summary>
            <param name="planName">The name of the plan.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.PlanExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a plan exists for the constituent.
            </summary>
            <param name="plan">Mapping of the column captions to a single row's values.</param>
            <returns>True if the plan exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.StartToAddAPlan(System.String)">
            <summary>
            Start to add a plan to the prospect constituent.
            </summary>
            <param name="planType">The caption of the add menu item for the type of plan to add.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ConstituentPanel.ClickConstituentLink(System.String)">
            <summary>
            Follow the specified constituency link.
            </summary>
            <param name="constituency"></param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.EventManagementTemplatesPanel">
            <summary>
            Class to handle interactions for the 'Event Management Templates' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventManagementTemplatesPanel.TemplateExists(System.String)">
            <summary>
            Check if an event management template exists.
            </summary>
            <param name="templateName">The name of the event management template.</param>
            <returns>True if the template exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventManagementTemplatesPanel.AddTemplate(System.String)">
            <summary>
            Add an event management template with a single level labeled 'Default'
            </summary>
            <param name="templateName">The name of the template to add.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.EventPanel">
            <summary>
            Class to handle interactions for the 'Event' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.AddCoordinator(System.String)">
            <summary>
            Add a coordinator.
            </summary>
            <param name="constituentLastName">The last name of the constituent to add as a coordinator.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.CoordinatorExists(System.String)">
            <summary>
            Check if the event record panel has the provided coordinator listed.
            </summary>
            <param name="coordinatorName">The name of coordinator.</param>
            <returns>True if the coordinator exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.IsEventName(System.String)">
            <summary>
            Check if the event record panel has the provided name.
            </summary>
            <param name="eventName">The event name value to check for.</param>
            <returns>True if the event has the provided name, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.IsStartDate(System.String)">
            <summary>
            Check if the event record panel starts on the provided start date.
            </summary>
            <param name="startDate">The start date value to check for.</param>
            <returns>True if the event starts on the start date, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.IsLocation(System.String)">
            <summary>
            Check if the event record panel occurs at the provided location.
            </summary>
            <param name="location">The location to check for.</param>
            <returns>True if the event occurs at the location, false otherwise</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.AddRegistrationOption(TechTalk.SpecFlow.TableRow)">
            <summary>
            Add a registration option.
            </summary>
            <param name="option">Mapping of field captions to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.RegistrationOptionExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a registration option exists.
            </summary>
            <param name="option">Mapping a column headers to a single row's values.</param>
            <returns>True if the registration option exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.CopyRegistrationOptions(System.String)">
            <summary>
            Copy the registration options from another existing event.
            </summary>
            <param name="copyFromEventName">The name of the event to copy the registration options from.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.AddExpense(TechTalk.SpecFlow.TableRow)">
            <summary>
            Add an expense under the 'Expenses' tab.
            </summary>
            <param name="expense">Mapping of the 'Add an expese' dialogs field captions to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.ExpenseExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if an expense exists in the 'Expenses' tab.
            </summary>
            <param name="expense">Mapping of the column captions to a row's values.</param>
            <returns>True if the expense exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.AddTaskDialog">
            <summary>
            Initiate the dialog for adding a task on the 'Tasks/Coordinators' tab.
            
            Note: This is technically a different dialog than the dialog for editing a task.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.EditTask(System.String)">
            <summary>
            Open the 'Edit task' dialog for task in the 'Tasks/Coordinators' tab.
            
            Note: This is technically a different dialog than the dialog for adding a task.
            </summary>
            <param name="taskName">The name of task to edit.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.ReminderExists(System.String,System.String)">
            <summary>
            Check if a reminder exists on task in the 'Tasks/Coordinators' tab.
            </summary>
            <param name="taskName">The name of task to check for the reminder on.</param>
            <param name="reminderTitle">The complete title of the reminder to check for.</param>
            <returns>True if the reminder exists on the task, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.SelectTask(System.String)">
            <summary>
            Select a task.
            </summary>
            <param name="taskName">The row's value for the task under the 'Name' column.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.AddPreference(System.String,TechTalk.SpecFlow.Table)">
            <summary>
            Add a Preference to an Event under the 'Options' tab
            </summary>
            <param name="name">The name of the preference to add.</param>
            <param name="preferences">Table where each TableRow corresponds to a desired grid row's values in the 'Add a preference' dialog.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.PreferenceExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a preference exists under the 'Options' tab of the current Event Panel.
            </summary>
            <param name="preference">Mapping of the column captions to a single row's values.</param>
            <returns>True if the preference exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.EventPanel.AddRegistrant">
            <summary>
            Start to add a registrant by clicking the add button under the 'Registrations' tab.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel">
            <summary>
            Class to handle interactions for the 'Information Library' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.AddAdHocQuery(System.String)">
            <summary>
            Load the dialog to add an Ad-Hoc Query and select the type of query to create.
            </summary>
            <param name="type">The type of query to add.</param>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.getXAllQueriesTreeRoot">
            <summary>
            XPath for the root of teh query treeview with text "All"
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.getXFilterQueryField">
            <summary>
            Return an Xpath for the Query Field on the InformationLibraryPanel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.SetFilter(System.String)">
            <summary>
            Set filter based on string passed in
            </summary>
            <param name="name">Filter to set</param>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.getXDeleteQuery">
            <summary>
            Returns an Xpath for the Delete Query menu item on a InformationLibraryPanel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.getXQuery(System.String)">
            <summary>
            Returns an Xpath for the highlighted Query search result.  
            </summary>
            <param name="text">The text of the result.</param>
            <returns></returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.CopyQueryAsStaticSelection(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Create a copy of an existing query as a static selection.
            </summary>
            <param name="selection">The name to give to the new static selection.</param>
            <param name="query">The query to create a copy off.  Mapping of the column captions to a single row's values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.QueryExists(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Check if a query exists.
            </summary>
            <param name="query">Mapping of the column captions to a single row's values.</param>
            <returns>True if the query exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.QueryExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a query exists.
            </summary>
            <param name="query">Mapping of the column captions to a single row's values.</param>
            <returns>True if the query exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.DeleteQuery(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Delete a query.
            </summary>
            <param name="query">Mapping of the column captions to a single row's values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.DeleteQuery(TechTalk.SpecFlow.TableRow)">
            <summary>
            Delete a query.
            </summary>
            <param name="query">Mapping of the column captions to a single row's values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.SelectSectionDatalistRow(TechTalk.SpecFlow.TableRow,System.String)">
            <summary>
            Select a datalist row for a section.
            </summary>
            <param name="row">Mapping of the column captions to a single row's values.</param>
            <param name="sectionCaption">The caption of the section.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.SelectSectionDatalistRow(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Select a datalist row for a section.
            </summary>
            <param name="rowValues">Mapping of the column captions to a single row's values.</param>
            <param name="sectionCaption">The caption of the section.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.SectionDatalistRowExists(TechTalk.SpecFlow.TableRow,System.String)">
            <summary>
            Check if a datalist row exists.
            </summary>
            <param name="row">Mapping of the column captions to a single row's values.</param>
            <param name="sectionCaption">The caption of the section.</param>
            <returns>True if the row exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.SectionDatalistRowExists(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Check if a datalist row exists.
            </summary>
            <param name="rowValues">Mapping of the column captions to a single row's values.</param>
            <param name="sectionCaption">The caption of the section.</param>
            <returns>True if the row exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.getXSectionDatalistRow(System.String,System.Collections.Generic.IDictionary{System.String,System.Int32},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Formats a unique xPath to find a single datalist row.
            </summary>
            <param name="sectionCaption">The caption of the section that the datalist belongs to.</param>
            <param name="columnCaptionToIndex">Mapping of the datalist column captions to their DOM TD index.</param>
            <param name="columnCaptionToValue">Mapping of the datalist column captions to their values in a single row.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.InformationLibraryPanel.getXDataListColumnValue(System.Int32,System.String)">
            <summary>
            Given the DOM index of a datalist column and the value for that column, return an XPath
            to append to a datalist XPath for finding that value in the requested column index.
            
            No element will be found if the value does not exist in this column.
            </summary>
            <param name="columnIndex">The DOM index for the TD element representing the desired column.</param>
            <param name="columnValue">The value corresponding the provided column.  </param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.LocationsPanel">
            <summary>
            Class to handle interactions for the 'Locations' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.LocationsPanel.LocationExists(System.String)">
            <summary>
            Checks if a location exists.
            </summary>
            <param name="locationName">The name of the location.</param>
            <returns>True if the location exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.LocationsPanel.LocationExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Checks if a location exists.
            </summary>
            <param name="location">Mapping of the column captions to the desired location's values.</param>
            <returns>True if the location exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.LocationsPanel.AddLocation(System.String)">
            <summary>
            Add an event location.
            </summary>
            <param name="locationName">The name of the location.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.MajorGivingSetupPanel">
            <summary>
            Class to handle interactions for the 'Major Giving Setup' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.MajorGivingSetupPanel.AddPlanOutline(System.String,TechTalk.SpecFlow.Table)">
            <summary>
            Add a major giving plan outline.
            </summary>
            <param name="planName">The name of the plan outline.</param>
            <param name="steps">Table where each row represents a step to add.  Row keys correspond to the column captions.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.MajorGivingSetupPanel.PlanOutlineExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a major giving plan outline exists
            </summary>
            <param name="plan">Mapping of field caption keys to their values.</param>
            <returns>True if the plan exists, false otherwise.</returns>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.MarketingAcknowledgementsPanel">
            <summary>
            Class to handle interactions for the 'Marketing Acknowledgements' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.MarketingAcknowledgementsPanel.AddTemplate">
            <summary>
            Start to add a new marketing acknowledgement template.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.MarketingAcknowledgementsPanel.TemplateExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a marketing acknowledgement template exists.
            </summary>
            <param name="template">Mapping of the column captions to a single row's values.</param>
            <returns>True if the template exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.MarketingAcknowledgementsPanel.DeleteTemplate(TechTalk.SpecFlow.TableRow)">
            <summary>
            Delete a marketing acknowledgement template.
            </summary>
            <param name="template">Mapping of the column captions to a single row's values.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.MarketingAcknowledgementTemplatePanel">
            <summary>
            Class to handle interactions for the 'Marketing Acknowledgement Template' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.MarketingAcknowledgementTemplatePanel.AddAcknowledgementRule">
            <summary>
            Start to add an acknowledgement rule to the template.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.MarketingAcknowledgementTemplatePanel.ProcessAcknowledgement">
            <summary>
            Start the process for the current acknowledgement template.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.MultiEventPanel">
            <summary>
            Class to handle interactions for the 'Multi-Event' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.MultiEventPanel.IsMultiEventName(System.String)">
            <summary>
            Check if the multi event record page has the provided name.
            </summary>
            <param name="name">The multi event name value to check for.</param>
            <returns>True if the multi event has the provided name, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.MultiEventPanel.IsHierarchy(TechTalk.SpecFlow.Table)">
            <summary>
            Check if the multi-event has the provided event hierarchy.
            </summary>
            <param name="hierarchy">The hierarchy to validate.  A column 'event' should exist for the event
            name with a column 'parent' mapping the expected parent of the event.  If no value is provided in the 'parent' column,
            it is assumed that this is the root event.</param>
            <returns>True if the multi-event has the provided hierarchy, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.MultiEventPanel.IsRootEvent(System.String)">
            <summary>
            Check if the provided event name is displayed as the root event for the Multi-Event page
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.MultiEventPanel.IsChildOfParent(System.String,System.String)">
            <summary>
            Check if the provided event is listed as a child of the expected parent event.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.PackagesPanel">
            <summary>
            Class to handle interactions for the 'Packages' panel.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.PackagesPanel.packagesColumnCaptionToIndex">
            <summary>
            Static mapping of the column captions to their DOM index for the 'Packages' datalist.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PackagesPanel.DeletePackage(TechTalk.SpecFlow.TableRow)">
            <summary>
            Delete a package.
            </summary>
            <param name="package">Mapping of the column captions to a single row's values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PackagesPanel.DeletePackage(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Delete a package.
            </summary>
            <param name="package">Mapping of the column captions to a single row's values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PackagesPanel.AddMailPackage">
            <summary>
            Start to add a mail package.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PackagesPanel.PackageExists(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Check if a package exists.
            </summary>
            <param name="package">Mapping of the column captions to a single row's values.</param>
            <returns>True if the package exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PackagesPanel.PackageExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a package exists.
            </summary>
            <param name="package">Mapping of the column captions to a single row's values.</param>
            <returns>True if the package exists, false otherwise</returns>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.PlanPanel">
            <summary>
            Class to handle interactions for the 'Plan' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PlanPanel.AddCompletedStep(TechTalk.SpecFlow.TableRow)">
            <summary>
            Add a completed step to the plan.
            </summary>
            <param name="step">Mapping of the field captions for adding a step to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PlanPanel.CompletedStepExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a completed step exists.
            </summary>
            <param name="step">Mapping of the column captions for the 'Completed steps' section to a single row's values.</param>
            <returns>True if the step exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PlanPanel.PlannedStepExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a planned step exists.
            </summary>
            <param name="step">Mapping of the column captions for the 'Planned and pending steps' section to a single row's values.</param>
            <returns>True if the step exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PlanPanel.EditSteps">
            <summary>
            Click the 'Edit steps' button for the 'Planned and pending steps' section.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.PledgePanel">
            <summary>
            Class to handle interactions for the 'Pledge' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PledgePanel.IsPledgeConstituent(System.String)">
            <summary>
            Check if the pledge is associated with the provided constituent.
            Verifies by checking which constituent the header link navigates to.
            </summary>
            <param name="constituent">The last name of the constituent.</param>
            <returns>True if the pledge is associated with the provided constituent, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PledgePanel.IsPledgeAmount(System.String)">
            <summary>
            Check if the pledge is for the provided amount.
            </summary>
            <param name="amount">The amount to check for.</param>
            <returns>True if the pledge is for the provided amount, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PledgePanel.IsPledgeSubtype(System.String)">
            <summary>
            Check if the pledge has the provided subtype.
            </summary>
            <param name="subtype">The subtype to check for.</param>
            <returns>True if the pledge has the subtype, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PledgePanel.DesignationExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a designation exists.
            </summary>
            <param name="designation">Mapping of the column captions to a single row's values.</param>
            <returns>True if the designation exists, false otherwise.</returns>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.PledgeSubtypePanel">
            <summary>
            Class to handle interactions for the 'Pledge Subtype' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PledgeSubtypePanel.AddSubtype(System.String,System.Boolean)">
            <summary>
            Add a pledge subtype.
            </summary>
            <param name="name">The name of the subtype.</param>
            <param name="postToGL">Boolean indicating whether the 'Post to GL' checkbox should bet set or not.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PledgeSubtypePanel.AddSubtype(TechTalk.SpecFlow.TableRow)">
            <summary>
            Add a pledge subtype.
            </summary>
            <param name="subtype">Mapping of the 'Add a pledge subtype' field captions to their values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PledgeSubtypePanel.SubtypeExists(System.String)">
            <summary>
            Check if a subtype exists.
            </summary>
            <param name="name">The name of the subtype/</param>
            <returns>True if the subtype exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.PledgeSubtypePanel.SubtypeExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a subtype exists.
            </summary>
            <param name="subtype">Mapping of column captions to a single row's values.</param>
            <returns>True if the subtype exists, false otherwise.</returns>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.QueryPanel">
            <summary>
            Class to handle interactions for the 'Query' panel.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.getXAddButton">
            <summary>
            Returns an Xpath for the Add button on a QueryPanel.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.getXAdhocQuery">
            <summary>
            Returns an Xpath for the Adhoc Query menu item on a QueryPanel.
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.getXFilterQueryField">
            <summary>
            Returns an Xpath for the Query Filter field on a QueryPanel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.SetFilter(System.String)">
            <summary>
            Set filter based on string passed in
            </summary>
            <param name="name">Filter to set</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.getXDeleteQuery(System.String)">
            <summary>
            Returns an XPath for the Delete Query menu item on a QueryPanel.  
            
            </summary>
            <param name="text">The text of the Query to delete</param>
            <returns></returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.getXQuery(System.String)">
            <summary>
            Returns an Xpath for a Query in a results row on a QueryPanel.
            
            </summary>
            <param name="text">The text of the Query.</param>
            <returns></returns>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.QueryLinkElement">
            <summary>
            IWebElement representing the Query link element
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.DeleteQueryLinkElement">
            <summary>
            IWebElement representing the Delete Query link element
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.YesReallyDeleteElement">
            <summary>
            IWebElement representing the Yes Delete Element
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.DeleteQuery(System.String)">
            <summary>
            Delete Query for the input string
            </summary>
            <param name="name">The query to delete</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.DeleteQuery(System.String,System.String)">
            <summary>
            Delete query
            </summary>
            <param name="xQuery">?</param>
            <param name="xDeleteQuery">?</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.CheckQueryPresent(System.String)">
            <summary>
            Check query is present by name
            </summary>
            <param name="name">Query name</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.AddQuery">
            <summary>
            Add a new Query
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.OpenQueriesTab">
            <summary>
            Open the queries tab
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.QueryPanel.OpenSelectionsTab">
            <summary>
            Open the selections tab
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage">
            <summary>
            BBISHomePage
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.getXUserNameField">
            <summary>
            Xpath for User Name field
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.getXPasswordField">
            <summary>
            XPath for Password field
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.getXLoginButton">
            <summary>
            XPath for the Loging button
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.getXNewLayoutButton">
            <summary>
            XPath for the New Layout Button
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.getXNewLayoutLayoutName">
            <summary>
            XPath for the New Layout Layout Name
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.getXNewLayoutLayoutDescription">
            <summary>
            XPath for the New Layout Layout Description
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.getXNewLayoutNextButton">
            <summary>
            XPath for the New Layout Next Button
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.getXNewLayoutSaveButton">
            <summary>
            XPath for the New Layout Save Button
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.getXFilterByNameField">
            <summary>
            XPath for the search Filter by Name Field
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.getXFilterByNameButton">
            <summary>
            XPath for the search Filter by Button
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.getXLayoutGridNameField">
            <summary>
            XPath for the Layout Grid Name Field
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.getXLayoutSearchResultsLine">
            <summary>
            XPath for the Layout Search Results Line
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.OpenLayoutGallery">
            <summary>
            Open the BBIS Layout Gallery
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.OpenImageLibrary">
            <summary>
            Open the BBIS Image Library
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.FilterLayoutByName(System.String)">
            <summary>
            Filters Layout by the Name provided
            </summary>
            <param name="layoutName">The name of the layout to be filtered on</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.CheckLayoutSearchResultsContain(System.String)">
            <summary>
            Check layout search results contain for passed string
            </summary>
            <param name="expected">The string excepted in the results</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.DeleteLayout(System.String)">
            <summary>
            Delete a layout
            </summary>
            <param name="layoutname">The layout name to remove</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.NewLayout(System.String,System.String)">
            <summary>
            Create a new layout
            </summary>
            <param name="Layoutname">The name fo the new layout</param>
            <param name="Description">Description of the new layout</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.Login">
            <summary>
            Logon with the credentials specified in the config file.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.LoginAs(System.String)">
            <summary>
            What it says - takes Credentials of the form "username:password".
            </summary>
            <param name="credentials"></param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.SetTextField(System.String,System.String)">
            <summary>
            Set the value of a field by copy pasting the value into the field and sending a Tab keystroke.
            </summary>
            <param name="xPath">The xPath to find an element for setting the value to.</param>
            <param name="value">The desired value of the element.</param>
        </member>
        <member name="P:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.BaseUrl">
            <summary>
            Return the config value for BBIS BaseUrl (BBISBaseUrl)
            </summary>
        </member>
        <member name="P:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.VirtualPath">
            <summary>
            Return URL config postfix for BBIS (BBISHomeUrl)
            </summary>
        </member>
        <member name="P:Blackbaud.UAT.Core.Bbis.Pages.BBISHomePage.Title">
            <summary>
            Return the default page title
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.BBCRMHomePage">
            <summary>
            A class for handling interactions and actions on the main BBCRM page.
            
            </summary>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.BBCRMHomePage.getXMenuMore">
            <summary>
            Returns an Xpath for the more button icon on the toolbar.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.getXTask(System.String)">
            <summary>
            Format an xPath to find a task in the left explorer bar.
            </summary>
            <param name="caption">The caption of the task.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.getXExtTab(System.String)">
            <summary>
            Returns an Xpath that will match a Tab either on the main tool bar or the expanded one.
            
            Any Functional Area link can be in two places; the main 'Tabs' menu and in the expanded menu. 
            This Xpath matches both elements.
            It relies on only one side matching at a time, which is true for this method but might not be for all possible permutaions
            of GUI manipulation, particularly changing window size. So the uniqueness of this Xpath depends on the sequence of GUI actions
            that lead up to its use.
            </summary>
            <param name="caption">The caption of the tab.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.getXExtMenuTab(System.String)">
            <summary>
            XPath for menu item tab based on string passed in
            </summary>
            <param name="caption">Menu item caption</param>
            <returns></returns>
        </member>
        <member name="F:Blackbaud.UAT.Core.Crm.BBCRMHomePage.getXWaitBar">
            <summary>
            Returns an Xpath for the WaitBar
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.OpenConstituentsFA">
            <summary>
            Navigate to the 'Constituents' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.OpenFundraisingFA">
            <summary>
            Navigate to the 'Fundraising' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.OpenRevenueFA">
            <summary>
            Navigate to the 'Revenue' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.OpenEventsFA">
            <summary>
            Navigate to the 'Events' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.OpenProspectsFA">
            <summary>
            Navigate to the 'Prospects' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.OpenAnalysisFA">
            <summary>
            Navigate to the 'Analysis' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.OpenMembershipsFA">
            <summary>
            Navigate to the 'Memberships' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.OpenMarketingAndCommunicationsFA">
            <summary>
            Navigate to the 'Marketing and Communications' functional area.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.OpenFunctionalArea(System.String,System.String)">
            <summary>
            Open a Functional Area by caption and wait for its header image to load.
            </summary>
            <param name="caption">The caption(name) of the Functional Area to open.</param>
            <param name="imageName">All or part of the image name that the desired functional area displays in the header.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.OpenFunctionalArea(System.String)">
            <summary>
            Open a Functional Area by caption.
            </summary>
            <param name="caption">The caption(name) of the Functional Area to open.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.Login">
            <summary>
            Logon with the credentials specified in the config file.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.BBCRMHomePage.LoginAs(System.String)">
            <summary>
            Login as a specified user.
            Pass credentials in the form "username:password".
            
            Authenticaiton requires that the target environment uses Blackbaud
            CustomBasicAuthentication.
            
            </summary>
            <param name="credentials"></param>
        </member>
        <member name="P:Blackbaud.UAT.Core.Crm.BBCRMHomePage.BaseUrl">
            <summary>
            Returns the URL from the test context
            </summary>
        </member>
        <member name="P:Blackbaud.UAT.Core.Crm.BBCRMHomePage.VirtualPath">
            <summary>
            BB CRM URL postfix
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.ReceiptsPanel">
            <summary>
            Class to handle interactions for the 'Receipts' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ReceiptsPanel.AddReceipt(TechTalk.SpecFlow.TableRow)">
            <summary>
            Add a receipt process.
            </summary>
            <param name="receipt">Mapping of the field captions to their desired values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.ReceiptsPanel.RunReceiptProcess(TechTalk.SpecFlow.TableRow)">
            <summary>
            Select a receipt process and start it.
            </summary>
            <param name="receiptProcess">Mapping of the column captions to a single row's values.</param>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.RecurringGiftPanel">
            <summary>
            Class to handle interactions for the 'Recurring Gift' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.RecurringGiftPanel.DesignationExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a designation exists for the recurring gift.
            </summary>
            <param name="designation">Mapping of the column captions to a single row's values.</param>
            <returns>True if the designation exists, false otherwise.</returns>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.RegistrantPanel">
            <summary>
            Class to handle interactions for the 'Event Registrant' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.RegistrantPanel.IsRegistrant(System.String)">
            <summary>
            Check the name of the registrant on the panel.
            </summary>
            <param name="registrant">The name of the registrant to check for.</param>
            <returns>True if the provided name is the name of the registrant.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.RegistrantPanel.IsEvent(System.String)">
            <summary>
            Check the name of the event the registrant is registered for.
            </summary>
            <param name="eventName">The name of the even to check for.</param>
            <returns>True if the provided name is the name of the associated event.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.RegistrantPanel.IsNumGuests(System.Int32)">
            <summary>
            Check the number of listed guests for the registrant.
            </summary>
            <param name="numGuests">The number of guests to check for.</param>
            <returns>True if the provided number is the listed number of guests.</returns>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.RevenueRecordPanel">
            <summary>
            Class to handle interactions for the 'Revenue Record' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.RevenueRecordPanel.IsSubtype(System.String)">
            <summary>
            Check the subtype of the revenue record.
            </summary>
            <param name="subtype">The subtype to check for.</param>
            <returns>True if the subtype is the expected value, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.RevenueRecordPanel.PaymentExists(TechTalk.SpecFlow.TableRow)">
            <summary>
            Check if a payment exists on the revenue record.
            </summary>
            <param name="donation">Mapping of the donation view form's captions (minus the colon) to a single donation's values.</param>
            <returns>True if the donation exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.RevenueRecordPanel.IsReceipted">
            <summary>
            Check if a payment is marked as 'Receipted'
            </summary>
            <returns>True if the payment is 'Receipted', false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.RevenueRecordPanel.IsAcknowledged">
            <summary>
            Check if a payment is marked as 'Acknowledged'
            </summary>
            <returns>True if the payment is 'Acknowledged', false otherwise.</returns>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.SegmentPanel">
            <summary>
            Class to handle interactions for the 'Segment' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.SegmentPanel.ActivatedMarketingEffortExists(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Check if an activated marketing effort exists.
            </summary>
            <param name="effort">Mapping of the column captions to a single row's values.</param>
            <returns>True if the effort exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.SegmentPanel.DeleteActivatedMarketingEffort(System.String)">
            <summary>
            Delete an activated marketing effort using the specified template.
            </summary>
            <param name="marketingTemplate">The name of the template that the effort uses.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.SegmentPanel.DeleteSegment">
            <summary>
            Delete the current segment.
            </summary>
        </member>
        <member name="T:Blackbaud.UAT.Core.Crm.Panels.SegmentsPanel">
            <summary>
            Class to handle interactions for the 'Segments' panel.
            </summary>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.SegmentsPanel.AddSegment(System.String)">
            <summary>
            Start to add a segment of the specified type.
            </summary>
            <param name="segmentType">The type of segment to add.  Corresponds to the caption of Add menu items.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.SegmentsPanel.DeleteSegment(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Delete a segment.
            </summary>
            <param name="segment">Mapping of the column captions to a single row's values.</param>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.SegmentsPanel.SegmentExists(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Check if a segment exists.
            </summary>
            <param name="segment">Mapping of the column captions to a single row's values.</param>
            <returns>True if the segment exists, false otherwise.</returns>
        </member>
        <member name="M:Blackbaud.UAT.Core.Crm.Panels.SegmentsPanel.GoToSegment(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Navigate to the segment panel of a specified segment.
            </summary>
            <param name="segment">Mapping of the column captions to a single row's values.</param>
        </member>
    </members>
</doc>
