// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SystemTest.Core.Features
{
    using TechTalk.SpecFlow;
    using System.Configuration;
    using OpenQA.Selenium.Chrome;
    using OpenQA.Selenium.Remote;
    using OpenQA.Selenium;
    using System.Collections.Generic;
    using System;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System.IO;
    using System.Drawing.Imaging;
    using ICSharpCode.SharpZipLib.Zip;
    using Blackbaud.UAT.SpecFlow.Selenium;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AppealMailing")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AppealMailingFeature : BaseTest
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        public Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext { get; set; }//;
        
#line 1 "AppealMailing.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AppealMailing", "\tIn order to create a mailing for an appeal\r\n\tAs a BBCRM user\r\n\tI want to add an " +
                    "Appeal mailing with a selection, package, contact rules, processing and output d" +
                    "etails", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "AppealMailing")))
            {
                SystemTest.Core.Features.AppealMailingFeature.FeatureSetup(null);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
            SaveChromeArtifacts(IsPass());
            StopDriver();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            ScenarioContext.Current.Add("Test", this);
            ScenarioContext.Current.Add("uniqueStamp", (DateTime.UtcNow.Subtract(new DateTime(1970, 7, 4)).TotalSeconds).ToString());
            StartDriver();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual bool IsPass()
        {
            Boolean pass = false;
            try { 
                pass = (NUnit.Framework.TestContext.CurrentContext.Result.Status == NUnit.Framework.TestStatus.Passed);
            } catch {
                pass = (TestContext.CurrentTestOutcome == Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed);
            }
            return pass;
        }
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        protected virtual void FeatureSetup()
        {
            FeatureSetup(null);
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Appeal Mailing: Create a new Appeal Mailing and modify the selection to incorpora" +
            "te an exclusion selection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Appeal Mailing: Create a new Appeal Mailing and modify the selection to incorpora" +
            "te an exclusion selection")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AppealMailing")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("AppealMailing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("AppealMailing")]
        public virtual void AppealMailingCreateANewAppealMailingAndModifyTheSelectionToIncorporateAnExclusionSelection()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appeal Mailing: Create a new Appeal Mailing and modify the selection to incorpora" +
                    "te an exclusion selection", new string[] {
                        "Ready",
                        "AppealMailing"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table1.AddRow(new string[] {
                        "Smith",
                        "Robert",
                        "Mr.",
                        "Bob",
                        "Other"});
            table1.AddRow(new string[] {
                        "Smith",
                        "Mark",
                        "Mr.",
                        "Mark",
                        "Other"});
#line 10
 testRunner.And("I add individual(s)", ((string)(null)), table1, "And ");
#line 14
 testRunner.And("Marketing Export Definitions \"UAT-TEST Export 1 - Testing Purposes only\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("Mail Package record \"UAT-Test Package 1\" exists with Export Definition \"UAT-TEST " +
                    "Export 1 - Testing Purposes only\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And("Constituent type Selection exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table2.AddRow(new string[] {
                        "FILTEROPERATOR",
                        "Contains"});
            table2.AddRow(new string[] {
                        "VALUE1",
                        "Smith"});
#line 17
 testRunner.And("I include \"Constituents\" record \"Name\" field with criteria equal to", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "Create Selection",
                        "Static",
                        "Show in Query Designer"});
            table3.AddRow(new string[] {
                        "UAT-Smith",
                        "Ad-hoc Query UAT Tes",
                        "true",
                        "true",
                        ""});
#line 21
 testRunner.And("I save Query Designer with the following options", ((string)(null)), table3, "And ");
#line 24
 testRunner.And("Constituent type Selection exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table4.AddRow(new string[] {
                        "FILTEROPERATOR",
                        "Equal to"});
            table4.AddRow(new string[] {
                        "VALUE1",
                        "Robert"});
#line 25
 testRunner.And("I include \"Constituents\" record \"First name\" field with criteria equal to", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "Create Selection",
                        "Static",
                        "Show in Query Designer"});
            table5.AddRow(new string[] {
                        "UAT-EXCL-Robert",
                        "Ad-hoc Query UAT exclusion Test",
                        "true",
                        "",
                        "true"});
#line 29
 testRunner.And("I save Query Designer with the following options", ((string)(null)), table5, "And ");
#line 32
 testRunner.And("Appeal \"UAT TEST - General Appeal\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Mail date",
                        "Appeal",
                        "Selection",
                        "Package"});
            table6.AddRow(new string[] {
                        "UAT Test Mail C",
                        "Today +1 month",
                        "UAT TEST - General Appeal",
                        "UAT-Smith",
                        "UAT-Test Package 1"});
#line 33
 testRunner.And("I add an Appeal mailing", ((string)(null)), table6, "And ");
#line 36
    testRunner.When("I edit Appeal mailing \"UAT Test Mail C\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 37
 testRunner.And("I edit the Selection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table7.AddRow(new string[] {
                        "FILTEROPERATOR",
                        "Equal to"});
            table7.AddRow(new string[] {
                        "COMBOVALUE",
                        "No"});
#line 38
 testRunner.And("I include Selection record \"UAT-EXCL-Robert\" field using criteria equal to", ((string)(null)), table7, "And ");
#line 42
 testRunner.And("I save the Appeal mailing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("I Start mailing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("Records successfully processed is greater than zero", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Mail date",
                        "Package",
                        "Selection"});
            table8.AddRow(new string[] {
                        "UAT Test Mail C",
                        "Today +1 month",
                        "UAT-Test Package 1",
                        "UAT-Smith"});
#line 45
 testRunner.Then("Appeal \"UAT TEST - General Appeal\" Mailings tab Appeal mailing List shows", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
