// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SystemTest.Core.Features
{
    using TechTalk.SpecFlow;
    using System.Configuration;
    using OpenQA.Selenium.Chrome;
    using OpenQA.Selenium.Remote;
    using OpenQA.Selenium;
    using System.Collections.Generic;
    using System;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System.IO;
    using System.Drawing.Imaging;
    using ICSharpCode.SharpZipLib.Zip;
    using Blackbaud.UAT.SpecFlow.Selenium;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Major Giving Prospects")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class MajorGivingProspectsFeature : BaseTest
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        public Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext { get; set; }//;
        
#line 1 "MajorGiving.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Major Giving Prospects", "\tAs a BBCRM user\r\n\tI want to flag Constituents as Prospects\r\n\tAnd manage Prospect" +
                    " Plans for Major Giving solicition", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Major Giving Prospects")))
            {
                SystemTest.Core.Features.MajorGivingProspectsFeature.FeatureSetup(null);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
            SaveChromeArtifacts(IsPass());
            StopDriver();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            ScenarioContext.Current.Add("Test", this);
            ScenarioContext.Current.Add("uniqueStamp", (DateTime.UtcNow.Subtract(new DateTime(1970, 7, 4)).TotalSeconds).ToString());
            StartDriver();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual bool IsPass()
        {
            Boolean pass = false;
            try { 
                pass = (NUnit.Framework.TestContext.CurrentContext.Result.Status == NUnit.Framework.TestStatus.Passed);
            } catch {
                pass = (TestContext.CurrentTestOutcome == Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed);
            }
            return pass;
        }
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        protected virtual void FeatureSetup()
        {
            FeatureSetup(null);
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Major Giving: Add a Prospect Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Major Giving: Add a Prospect Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void MajorGivingAddAProspectConstituent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Major Giving: Add a Prospect Constituent", new string[] {
                        "Ready",
                        "MajorGiving"});
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Nickname",
                        "Information source",
                        "Last name",
                        "First name"});
            table1.AddRow(new string[] {
                        "Mr.",
                        "Bobby",
                        "Other",
                        "Case",
                        "Test"});
#line 10
 testRunner.And("a constituent record exists", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Surname",
                        "Date from",
                        "Date to",
                        "Constituency"});
            table2.AddRow(new string[] {
                        "Case",
                        "Today",
                        "Today +1 year",
                        "Major giving prospect"});
#line 13
 testRunner.And("I add Constituencies to the following Constituents", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Description",
                        "Date from",
                        "Date to"});
            table3.AddRow(new string[] {
                        "Major giving prospect",
                        "Today",
                        "Today +1 year"});
#line 16
 testRunner.Then("the Prospect Constituency is added", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Major Giving: Add a Fundraiser to a Prospect Team on a Prospect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Major Giving: Add a Fundraiser to a Prospect Team on a Prospect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void MajorGivingAddAFundraiserToAProspectTeamOnAProspect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Major Giving: Add a Fundraiser to a Prospect Team on a Prospect", new string[] {
                        "Ready",
                        "MajorGiving"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Nickname",
                        "Information source",
                        "Last name",
                        "First name"});
            table4.AddRow(new string[] {
                        "Mr.",
                        "Bobby",
                        "Other",
                        "ExistingProspect",
                        "Test"});
            table4.AddRow(new string[] {
                        "Mr.",
                        "TC",
                        "Other",
                        "ExistingFundraiser",
                        "Test"});
#line 24
 testRunner.And("a constituent record exists", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Surname",
                        "Date from",
                        "Date to",
                        "Constituency"});
            table5.AddRow(new string[] {
                        "ExistingProspect",
                        "Today",
                        "Today +1 year",
                        "Major giving prospect"});
            table5.AddRow(new string[] {
                        "ExistingFundraiser",
                        "Today",
                        "Today +5 year",
                        "Fundraiser"});
#line 28
 testRunner.And("I add Constituencies to the following Constituents", ((string)(null)), table5, "And ");
#line 32
 testRunner.And("Prospect Team role \"Relationship Lead\" exists for \"ExistingProspect\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Team member",
                        "Role",
                        "Start date"});
            table6.AddRow(new string[] {
                        "ExistingFundraiser",
                        "Relationship Lead",
                        "Today"});
#line 33
 testRunner.When("I Add team member to \"ExistingProspect\"", ((string)(null)), table6, "When ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Role",
                        "Start date"});
            table7.AddRow(new string[] {
                        "ExistingFundraiser",
                        "Relationship Lead",
                        "Today"});
#line 36
 testRunner.Then("The \"Relationship Lead - Current\" Team Member exists", ((string)(null)), table7, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Major Giving: Add a Major Giving Prospect Plan to a Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Major Giving: Add a Major Giving Prospect Plan to a Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void MajorGivingAddAMajorGivingProspectPlanToAConstituent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Major Giving: Add a Major Giving Prospect Plan to a Constituent", new string[] {
                        "Ready",
                        "MajorGiving"});
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Nickname",
                        "Information source",
                        "Last name",
                        "First name"});
            table8.AddRow(new string[] {
                        "Mr.",
                        "A",
                        "Other",
                        "Prospect",
                        "Bob"});
            table8.AddRow(new string[] {
                        "Mr.",
                        "B",
                        "Other",
                        "Baker",
                        "Fred"});
            table8.AddRow(new string[] {
                        "Mr.",
                        "C",
                        "Other",
                        "Keyworth",
                        "Daniel"});
#line 44
 testRunner.And("a constituent record exists", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Surname",
                        "Date from",
                        "Date to",
                        "Constituency"});
            table9.AddRow(new string[] {
                        "Prospect",
                        "Today",
                        "Today +1 year",
                        "Major giving prospect"});
            table9.AddRow(new string[] {
                        "Keyworth",
                        "Today",
                        "Today +5 year",
                        "Fundraiser"});
            table9.AddRow(new string[] {
                        "Baker",
                        "Today",
                        "Today +5 year",
                        "Fundraiser"});
#line 49
 testRunner.And("I add Constituencies to the following Constituents", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objective",
                        "Fundraiser role",
                        "Stage",
                        "Days from start",
                        "Contact method"});
            table10.AddRow(new string[] {
                        "Clearance to Approach Client",
                        "Prospect manager",
                        "Identification",
                        "7",
                        ""});
            table10.AddRow(new string[] {
                        "Prepare Ask client",
                        "Primary manager",
                        "Cultivation",
                        "20",
                        ""});
            table10.AddRow(new string[] {
                        "Explore Inclination of client",
                        "Primary manager",
                        "Cultivation",
                        "60",
                        ""});
            table10.AddRow(new string[] {
                        "Make Ask of client",
                        "Primary manager",
                        "Negotiation",
                        "90",
                        ""});
#line 54
 testRunner.And("I add Plan Outline \"UAT MG Plan Outline\" to Major Giving Setup", ((string)(null)), table10, "And ");
#line 60
 testRunner.When("I start to add a major giving plan to \'Bob Prospect\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Plan name",
                        "Plan type",
                        "Start date",
                        "Primary manager",
                        "Secondary manager"});
            table11.AddRow(new string[] {
                        "UAT MG Plan",
                        "Major giving",
                        "Today",
                        "Baker",
                        "Keyworth"});
#line 61
 testRunner.And("set the details", ((string)(null)), table11, "And ");
#line 64
 testRunner.And("set the Steps with outline \'UAT MG Plan Outline\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Expected date",
                        "Objective",
                        "Owner",
                        "Stage",
                        "Status",
                        "Contact method"});
            table12.AddRow(new string[] {
                        "Today +1 week",
                        "Discuss Mission",
                        "Baker",
                        "Cultivation",
                        "Planned",
                        "Phone call"});
#line 65
 testRunner.And("insert a step on row 3", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Expected date",
                        "Objective",
                        "Owner",
                        "Stage",
                        "Status",
                        "Contact method"});
            table13.AddRow(new string[] {
                        "Today +3 Months",
                        "Discuss mission",
                        "Baker",
                        "Cultivation",
                        "Planned",
                        "Meeting"});
#line 68
 testRunner.And("insert a step on row 4", ((string)(null)), table13, "And ");
#line 71
 testRunner.And("save the plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Constituent",
                        "Plan type",
                        "Plan name"});
            table14.AddRow(new string[] {
                        "Bob Prospect",
                        "Major giving",
                        "UAT MG Plan"});
#line 72
 testRunner.Then("the plan exists on the constituent", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Major Giving: Add a planned gift to a major giving prospect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Major Giving: Add a planned gift to a major giving prospect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void MajorGivingAddAPlannedGiftToAMajorGivingProspect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Major Giving: Add a planned gift to a major giving prospect", new string[] {
                        "Ready",
                        "MajorGiving"});
#line 78
this.ScenarioSetup(scenarioInfo);
#line 79
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table15.AddRow(new string[] {
                        "Testcase",
                        "Bob",
                        "Mr.",
                        "Test",
                        "Other"});
            table15.AddRow(new string[] {
                        "Prospecting",
                        "Bob",
                        "Mr.",
                        "Case",
                        "Other"});
#line 80
 testRunner.And("I add individual(s)", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Surname",
                        "Date from",
                        "Date to",
                        "Constituency"});
            table16.AddRow(new string[] {
                        "Prospecting",
                        "Today",
                        "Today +1 year",
                        "Major giving prospect"});
#line 84
 testRunner.And("I add Constituencies to the following Constituents", ((string)(null)), table16, "And ");
#line 87
 testRunner.And("Prospect \"Bob Prospecting\" has an individual relationship with constituent \"Bob T" +
                    "estcase\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Planned gift vehicle",
                        "Status",
                        "Gift amount",
                        "Probate status"});
            table17.AddRow(new string[] {
                        "Bequest",
                        "Accepted",
                        "$100.00",
                        "Final distribution"});
#line 88
 testRunner.When("I add a Planned Gift to Prospect \"Bob Prospecting\"", ((string)(null)), table17, "When ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Designation",
                        "Amount"});
            table18.AddRow(new string[] {
                        "Library Books",
                        "$100.00"});
#line 91
 testRunner.And("I add to planned Gift Details", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Constituent"});
            table19.AddRow(new string[] {
                        "Bob Testcase"});
#line 94
 testRunner.And("I add to Planned Giving Relationships", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Description",
                        "Value",
                        "Cost Basis",
                        "Valuation method"});
            table20.AddRow(new string[] {
                        "Books",
                        "Test",
                        "100",
                        "0.00",
                        "Internal"});
#line 97
 testRunner.And("I add to Assests tab", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Constituent",
                        "Status",
                        "Vehicle",
                        "Amount",
                        "Sites"});
            table21.AddRow(new string[] {
                        "Bob Prospecting",
                        "Accepted",
                        "Bequest",
                        "$100.00",
                        ""});
#line 100
 testRunner.Then("the Planned Gift can be seen with the details", ((string)(null)), table21, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Major Giving: Add Opportunity to Major Giving Plan on Prospect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Major Giving: Add Opportunity to Major Giving Plan on Prospect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void MajorGivingAddOpportunityToMajorGivingPlanOnProspect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Major Giving: Add Opportunity to Major Giving Plan on Prospect", new string[] {
                        "Ready",
                        "MajorGiving"});
#line 106
this.ScenarioSetup(scenarioInfo);
#line 107
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "Nickname",
                        "Information source",
                        "Last name",
                        "First name"});
            table22.AddRow(new string[] {
                        "Mr.",
                        "Bobby",
                        "Other",
                        "Hannibal",
                        "Test"});
            table22.AddRow(new string[] {
                        "Mr.",
                        "Bobby",
                        "Other",
                        "William",
                        "Test"});
#line 108
 testRunner.And("a constituent record exists", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Surname",
                        "Date from",
                        "Date to",
                        "Constituency"});
            table23.AddRow(new string[] {
                        "Hannibal",
                        "Today",
                        "Today +1 year",
                        "Major giving prospect"});
            table23.AddRow(new string[] {
                        "William",
                        "Today",
                        "Today +1 year",
                        "Fundraiser"});
#line 112
 testRunner.And("I add Constituencies to the following Constituents", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objective",
                        "Fundraiser role",
                        "Stage",
                        "Days from start",
                        "Contact method"});
            table24.AddRow(new string[] {
                        "Clearance to Approach Client",
                        "Prospect manager",
                        "Identification",
                        "7",
                        ""});
            table24.AddRow(new string[] {
                        "Prepare Ask client",
                        "Primary manager",
                        "Cultivation",
                        "20",
                        ""});
            table24.AddRow(new string[] {
                        "Explore Inclination of client",
                        "Primary manager",
                        "Cultivation",
                        "60",
                        ""});
            table24.AddRow(new string[] {
                        "Make Ask of client",
                        "Primary manager",
                        "Negotiation",
                        "90",
                        ""});
#line 116
 testRunner.And("I add Plan Outline \"UAT Test Outline Two\" to Major Giving Setup", ((string)(null)), table24, "And ");
#line 122
 testRunner.And("I start to add a major giving plan to \'Hannibal\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Plan name",
                        "Plan type",
                        "Start date",
                        "Primary manager",
                        "Secondary manager"});
            table25.AddRow(new string[] {
                        "UAT Test MG Plan",
                        "Major giving",
                        "Today",
                        "William",
                        ""});
#line 123
 testRunner.And("set the details", ((string)(null)), table25, "And ");
#line 126
 testRunner.And("set the Steps with outline \'UAT Test Outline Two\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 127
 testRunner.And("save the plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 128
 testRunner.When("I go to plan \"UAT Test MG Plan\" for prospect \"Hannibal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Status",
                        "Expected Ask Amount",
                        "Expected Ask date from now"});
            table26.AddRow(new string[] {
                        "Qualified",
                        "$10,000.00",
                        "90"});
#line 129
 testRunner.And("I have selected Add from the Opportunities tab", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Status",
                        "Expected Ask Amount",
                        "Expected Ask date from now"});
            table27.AddRow(new string[] {
                        "Qualified",
                        "$10,000.00",
                        "90"});
#line 132
 testRunner.Then("an Opportunity is associated with the Major Giving Plan called \"UAT Test MG Plan\"" +
                    "", ((string)(null)), table27, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
