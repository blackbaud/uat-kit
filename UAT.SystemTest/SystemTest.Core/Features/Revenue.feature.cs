// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SystemTest.Core.Features
{
    using TechTalk.SpecFlow;
    using System.Configuration;
    using OpenQA.Selenium.Chrome;
    using OpenQA.Selenium.Remote;
    using OpenQA.Selenium;
    using System.Collections.Generic;
    using System;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System.IO;
    using System.Drawing.Imaging;
    using ICSharpCode.SharpZipLib.Zip;
    using Blackbaud.UAT.SpecFlow.Selenium;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Revenue")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class RevenueFeature : BaseTest
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        public Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext { get; set; }//;
        
#line 1 "Revenue.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Revenue", "\tAs a BBCRM user\r\n\tI want to be able to add payments to a variety of revenue type" +
                    "s and populate various revenue data", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Revenue")))
            {
                SystemTest.Core.Features.RevenueFeature.FeatureSetup(null);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
            SaveChromeArtifacts(IsPass());
            StopDriver();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            ScenarioContext.Current.Add("Test", this);
            ScenarioContext.Current.Add("uniqueStamp", (DateTime.UtcNow.Subtract(new DateTime(1970, 7, 4)).TotalSeconds).ToString());
            StartDriver();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual bool IsPass()
        {
            Boolean pass = false;
            try { 
                pass = (NUnit.Framework.TestContext.CurrentContext.Result.Status == NUnit.Framework.TestStatus.Passed);
            } catch {
                pass = (TestContext.CurrentTestOutcome == Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed);
            }
            return pass;
        }
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        protected virtual void FeatureSetup()
        {
            FeatureSetup(null);
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Revenue: Add a single Donation payment to a constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revenue: Add a single Donation payment to a constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Revenue")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("Revenue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Revenue")]
        public virtual void RevenueAddASingleDonationPaymentToAConstituent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revenue: Add a single Donation payment to a constituent", new string[] {
                        "Ready",
                        "Revenue"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table1.AddRow(new string[] {
                        "Gamgee",
                        "Sam",
                        "Mr.",
                        "Sam",
                        "Other"});
#line 9
 testRunner.And("I add individual", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "Date",
                        "Application",
                        "Designation",
                        "Payment Method",
                        "Payment is anonymous",
                        "Reference",
                        "Benefit"});
            table2.AddRow(new string[] {
                        "$100.00",
                        "Today",
                        "Donation",
                        "Library Books",
                        "Check",
                        "",
                        "",
                        ""});
#line 12
 testRunner.When("I add a Payment to constituent \"Sam Gamgee\" with account system \"System Generated" +
                    " Account System\"", ((string)(null)), table2, "When ");
#line 15
 testRunner.Then("the revenue record is presented on the constituent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Revenue: Add a single Pledge payment to a constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revenue: Add a single Pledge payment to a constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Revenue")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("Revenue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Revenue")]
        public virtual void RevenueAddASinglePledgePaymentToAConstituent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revenue: Add a single Pledge payment to a constituent", new string[] {
                        "Ready",
                        "Revenue"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table3.AddRow(new string[] {
                        "Bailey",
                        "Fredrick",
                        "Mr.",
                        "Fred",
                        "Other"});
#line 21
 testRunner.And("I add individual(s)", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "Designation",
                        "Installments",
                        "Start date",
                        "Post Type",
                        "Number of Installments"});
            table4.AddRow(new string[] {
                        "$1,200.00",
                        "Library Books",
                        "Monthly",
                        "Today",
                        "Do not post",
                        "1"});
#line 24
 testRunner.And("A Pledge has been submitted today for the Constituent \"Fredrick Bailey\" with acco" +
                    "unt system \"System Generated Account System\"", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "Date",
                        "Application",
                        "Designation",
                        "Payment Method",
                        "Payment is anonymous",
                        "Reference",
                        "Benefit"});
            table5.AddRow(new string[] {
                        "$100.00",
                        "Today",
                        "Pledge",
                        "Library Books",
                        "Check",
                        "",
                        "",
                        ""});
#line 27
 testRunner.When("I add a Payment to constituent \"Fredrick Bailey\" with account system \"System Gene" +
                    "rated Account System\"", ((string)(null)), table5, "When ");
#line 30
 testRunner.Then("the revenue record is presented on the constituent as Applied to the Pledge for t" +
                    "he amount \"$100.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
 testRunner.And("the Pledge record balance is reduced by the payment amount value for constituent " +
                    "\"Fredrick Bailey\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And("the Pledge Installment/Write-off Activity tab shows the payment linked to an inst" +
                    "allment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Revenue: Add a payment to a constituent to fulfil an Event Registration fee")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revenue: Add a payment to a constituent to fulfil an Event Registration fee")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Revenue")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("Revenue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Revenue")]
        public virtual void RevenueAddAPaymentToAConstituentToFulfilAnEventRegistrationFee()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revenue: Add a payment to a constituent to fulfil an Event Registration fee", new string[] {
                        "Ready",
                        "Revenue"});
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table6.AddRow(new string[] {
                        "Bailey",
                        "Tom",
                        "Mr.",
                        "Tom",
                        "Other"});
#line 38
 testRunner.And("I add individual(s)", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registration type",
                        "Registration count",
                        "Registration fee"});
            table7.AddRow(new string[] {
                        "Adult",
                        "1",
                        "$200.00"});
#line 41
 testRunner.And("Event \"Test Event\" exists with Registration Option", ((string)(null)), table7, "And ");
#line 44
 testRunner.And("Constituent \"Tom Bailey\" is registered for event named \"Test Event\" with \"Adult\" " +
                    "registration option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "Date",
                        "Application",
                        "Designation",
                        "Payment Method",
                        "Payment is anonymous",
                        "Reference",
                        "Benefit"});
            table8.AddRow(new string[] {
                        "$200.00",
                        "Today",
                        "Event registration",
                        "",
                        "Check",
                        "",
                        "",
                        ""});
#line 45
 testRunner.When("I add a Payment to constituent \"Tom Bailey\" with account system \"System Generated" +
                    " Account System\"", ((string)(null)), table8, "When ");
#line 48
 testRunner.Then("the revenue record is presented on the constituent \"Tom Bailey\" as Applied to Eve" +
                    "nt Registration for \"Test Event\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
 testRunner.And("Balance on Registration fee is \"$0.00\" for constituent \"Tom Bailey\" as Applied to" +
                    " Event Registration for \"Test Event\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Revenue: Add a pledge with multiple designations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revenue: Add a pledge with multiple designations")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Revenue")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("Revenue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Revenue")]
        public virtual void RevenueAddAPledgeWithMultipleDesignations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revenue: Add a pledge with multiple designations", new string[] {
                        "Ready",
                        "Revenue"});
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table9.AddRow(new string[] {
                        "Other",
                        "A N",
                        "Mr.",
                        "Bobby",
                        "Other"});
#line 55
 testRunner.And("I add individual(s)", ((string)(null)), table9, "And ");
#line 58
 testRunner.And("designation exists \'Library Books\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.And("designation exists \'Library Furniture\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Constituent",
                        "Amount"});
            table10.AddRow(new string[] {
                        "A N Other",
                        "$300.00"});
#line 60
 testRunner.When("I start to add a pledge", ((string)(null)), table10, "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Designation",
                        "Amount"});
            table11.AddRow(new string[] {
                        "Library Books",
                        "$150.00"});
            table11.AddRow(new string[] {
                        "Library Furniture",
                        "$150.00"});
#line 63
 testRunner.And("split the pledge designations evenly", ((string)(null)), table11, "And ");
#line 67
 testRunner.And("save the pledge", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Designation",
                        "Amount",
                        "Balance"});
            table12.AddRow(new string[] {
                        "Library Books",
                        "$150.00",
                        "$150.00"});
            table12.AddRow(new string[] {
                        "Library Furniture",
                        "$150.00",
                        "$150.00"});
#line 68
 testRunner.Then("a pledge exists with designations", ((string)(null)), table12, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Revenue: Edit a posted payment to apply to an outstanding Pledge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revenue: Edit a posted payment to apply to an outstanding Pledge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Revenue")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("Revenue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Revenue")]
        public virtual void RevenueEditAPostedPaymentToApplyToAnOutstandingPledge()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revenue: Edit a posted payment to apply to an outstanding Pledge", new string[] {
                        "Ready",
                        "Revenue"});
#line 75
this.ScenarioSetup(scenarioInfo);
#line 76
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 77
 testRunner.And("Allow direct posting of all payments has been set for account system \"System Gene" +
                    "rated Account System\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table13.AddRow(new string[] {
                        "Shaw",
                        "Franklin",
                        "Mr.",
                        "Frank",
                        "Other"});
#line 78
 testRunner.And("I add individual(s)", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "Date",
                        "Application",
                        "Designation",
                        "Payment Method",
                        "Post Status",
                        "Payment Is Anonymous",
                        "Reference",
                        "Benefit"});
            table14.AddRow(new string[] {
                        "$100.00",
                        "Today",
                        "Donation",
                        "LIBRARY BOOKS",
                        "Check",
                        "Not Posted",
                        "false",
                        "",
                        ""});
#line 81
 testRunner.And("I add a Payment to constituent \"Franklin Shaw\" with account system \"System Genera" +
                    "ted Account System\"", ((string)(null)), table14, "And ");
#line 84
 testRunner.And("a revenue type selection exists for the constituent \"Shaw\" donation payment calle" +
                    "d \"Test Central Post Shaw\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Account System",
                        "Output format",
                        "Post date up to",
                        "Deposits",
                        "Revenue",
                        "Selection",
                        "Bank Account Adjustments",
                        "Mark revenue records Posted"});
            table15.AddRow(new string[] {
                        "TestPostToGL",
                        "System Generated Account System",
                        "Standard post format",
                        "Today",
                        "None",
                        "Selected revenue records",
                        "Test Central Post Shaw",
                        "None",
                        "true"});
#line 85
 testRunner.And("a Post to GL process exists", ((string)(null)), table15, "And ");
#line 88
 testRunner.And("I Start the \"TestPostToGL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 89
 testRunner.And("the process \"TestPostToGL\" runs without error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "Designation",
                        "Start date",
                        "Installments",
                        "Number of Installments",
                        "Installment amount",
                        "Post type"});
            table16.AddRow(new string[] {
                        "$100.00",
                        "LIBRARY BOOKS",
                        "Today",
                        "Annually",
                        "1",
                        "",
                        "Do not post"});
#line 90
 testRunner.And("A Pledge has been submitted today for the Constituent \"Franklin Shaw\" with accoun" +
                    "t system \"System Generated Account System\"", ((string)(null)), table16, "And ");
#line 93
 testRunner.When("I edit posted payment for constituent \"Franklin Shaw\" for type \"default\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 94
 testRunner.And("I Remove the Current applications", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("I change Application dropdown to \"Pledge\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.And("I select the Pledge for \"Franklin Shaw\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 97
 testRunner.And("I click Add", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.And("I select radio button for Pledge balance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Adjustment reason"});
            table17.AddRow(new string[] {
                        "Adjustment - ERBApplyEditPostedPledge"});
#line 99
 testRunner.And("I add Adjustment details", ((string)(null)), table17, "And ");
#line 102
 testRunner.Then("the revenue record (Amount) is presented on the constituent \"Franklin Shaw\" for a" +
                    "mount \"$100.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Post Status",
                        "Date Started",
                        "End date",
                        "Remain anonymous"});
            table18.AddRow(new string[] {
                        "Posted (activity pending)",
                        "",
                        "",
                        ""});
#line 103
 testRunner.And("Revenue Transaction Profile View Form displays", ((string)(null)), table18, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Revenue: Add a Donation payment to a constituent with payment method of Stock")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revenue: Add a Donation payment to a constituent with payment method of Stock")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Revenue")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("Revenue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Revenue")]
        public virtual void RevenueAddADonationPaymentToAConstituentWithPaymentMethodOfStock()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revenue: Add a Donation payment to a constituent with payment method of Stock", new string[] {
                        "Ready",
                        "Revenue"});
#line 109
this.ScenarioSetup(scenarioInfo);
#line 110
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table19.AddRow(new string[] {
                        "Stiller",
                        "Susan",
                        "Miss",
                        "Sue",
                        "Other"});
#line 111
 testRunner.And("I add individual", ((string)(null)), table19, "And ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "Date",
                        "Application",
                        "Designation",
                        "Payment method",
                        "Issuer",
                        "Number of units",
                        "Price per share Median",
                        "Payment is anonymous",
                        "Reference",
                        "Benefit"});
            table20.AddRow(new string[] {
                        "$152.80",
                        "Today",
                        "Donation",
                        "Library Books",
                        "Stock",
                        "Burberry Group",
                        "10",
                        "15.2800",
                        "",
                        "",
                        ""});
#line 114
 testRunner.When("I add a Payment to constituent \"Susan Stiller\" with account system \"System Genera" +
                    "ted Account System\"", ((string)(null)), table20, "When ");
#line 117
 testRunner.Then("the revenue record is presented on the constituent with Amount \"$152.80\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment Amount",
                        "Date",
                        "Payment method",
                        "Number of units",
                        "Median price",
                        "Sold"});
            table21.AddRow(new string[] {
                        "$152.80",
                        "Today",
                        "Stock",
                        "10.000",
                        "15.2800",
                        ""});
#line 118
 testRunner.And("Revenue Transaction Page Transaction Summary displays payment method information", ((string)(null)), table21, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Revenue: Add a single Donation payment to a constituent and mark as anonymous")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revenue: Add a single Donation payment to a constituent and mark as anonymous")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Revenue")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("Revenue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Revenue")]
        public virtual void RevenueAddASingleDonationPaymentToAConstituentAndMarkAsAnonymous()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revenue: Add a single Donation payment to a constituent and mark as anonymous", new string[] {
                        "Ready",
                        "Revenue"});
#line 124
this.ScenarioSetup(scenarioInfo);
#line 125
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table22.AddRow(new string[] {
                        "Thomas",
                        "Sally",
                        "Mrs.",
                        "Sal",
                        "Other"});
#line 126
 testRunner.And("I add individual", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "Date",
                        "Application",
                        "Designation",
                        "Payment Method",
                        "Payment is anonymous",
                        "Reference",
                        "Benefit"});
            table23.AddRow(new string[] {
                        "$100.00",
                        "Today",
                        "Donation",
                        "Library Books",
                        "Check",
                        "true",
                        "",
                        ""});
#line 129
 testRunner.When("I add a Payment to constituent \"Sally Thomas\" with account system \"System Generat" +
                    "ed Account System\"", ((string)(null)), table23, "When ");
#line 132
 testRunner.Then("the revenue record is presented on the constituent with notification \"Constituent" +
                    " requests to remain anonymous for this payment.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Revenue: Add a single Donation payment to a constituent in response to an Appeal " +
            "Mailing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revenue: Add a single Donation payment to a constituent in response to an Appeal " +
            "Mailing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Revenue")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("Revenue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Revenue")]
        public virtual void RevenueAddASingleDonationPaymentToAConstituentInResponseToAnAppealMailing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revenue: Add a single Donation payment to a constituent in response to an Appeal " +
                    "Mailing", new string[] {
                        "Ready",
                        "Revenue"});
#line 136
this.ScenarioSetup(scenarioInfo);
#line 137
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table24.AddRow(new string[] {
                        "Grey",
                        "Gary",
                        "Mr.",
                        "Spike",
                        "Other"});
#line 138
 testRunner.And("I add individual(s)", ((string)(null)), table24, "And ");
#line 141
 testRunner.And("Marketing Export Definitions \"UAT-TEST Export 2 - Testing Purposes only\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.And("Mail Package record \"UAT-Test Package 2\" exists with Export Definition \"UAT-TEST " +
                    "Export 2 - Testing Purposes only\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
 testRunner.And("Constituent type Selection exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "field",
                        "value"});
            table25.AddRow(new string[] {
                        "FILTEROPERATOR",
                        "Equal to"});
            table25.AddRow(new string[] {
                        "VALUE1",
                        "Grey"});
#line 144
 testRunner.And("I include \"Constituents\" record \"Name\" field with criteria equal to", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Description",
                        "Create Selection",
                        "Static",
                        "Show in Query Designer"});
            table26.AddRow(new string[] {
                        "UAT-Appeal-Gary",
                        "Ad-hoc Query UAT Test",
                        "true",
                        "true",
                        ""});
#line 148
 testRunner.And("I save Query Designer with the following options", ((string)(null)), table26, "And ");
#line 151
 testRunner.And("Appeal \"UAT TEST - General Appeal\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Mail date",
                        "Appeal",
                        "Selection",
                        "Package"});
            table27.AddRow(new string[] {
                        "UAT Test Mail D",
                        "Today +1 month",
                        "UAT TEST - General Appeal",
                        "UAT-Appeal-Gary",
                        "UAT-Test Package 2"});
#line 152
 testRunner.And("I add an Appeal mailing", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "Date",
                        "Application",
                        "Designation",
                        "Payment Method",
                        "Payment is anonymous",
                        "Reference",
                        "Benefit"});
            table28.AddRow(new string[] {
                        "$100.00",
                        "Today",
                        "Donation",
                        "Library Books",
                        "Check",
                        "",
                        "",
                        ""});
#line 155
 testRunner.When("I add a Payment to constituent \"Gary Grey\" with account system \"System Generated " +
                    "Account System\"", ((string)(null)), table28, "When ");
#line 158
 testRunner.And("I enter Marketing appeal \"UAT TEST - General Appeal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 159
 testRunner.Then("the revenue record is presented on the constituent with Appeal \"UAT TEST - Genera" +
                    "l Appeal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Revenue: Add a new campaign with a specified monetary goal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revenue: Add a new campaign with a specified monetary goal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Revenue")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("Revenue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Revenue")]
        public virtual void RevenueAddANewCampaignWithASpecifiedMonetaryGoal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revenue: Add a new campaign with a specified monetary goal", new string[] {
                        "Ready",
                        "Revenue"});
#line 163
this.ScenarioSetup(scenarioInfo);
#line 164
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table29.AddRow(new string[] {
                        "Grey",
                        "Gary",
                        "Mr.",
                        "Spike",
                        "Other"});
#line 165
 testRunner.And("a Fundraiser exists", ((string)(null)), table29, "And ");
#line 168
 testRunner.And("I add site \"Site A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "LookupID",
                        "Type",
                        "Site",
                        "Start date",
                        "End date"});
            table30.AddRow(new string[] {
                        "Test Campaign B",
                        "Test Campaign B",
                        "Smile",
                        "Site A",
                        "Today",
                        "Today +1 year"});
#line 169
 testRunner.And("I add campaign(s)", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Fundraiser",
                        "Start date"});
            table31.AddRow(new string[] {
                        "Gary Grey",
                        "Today"});
#line 172
 testRunner.And("I Add Fundraisers via Fundraiser tab", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "LookupID",
                        "Type",
                        "Site",
                        "Start date",
                        "End date"});
            table32.AddRow(new string[] {
                        "Test Campaign A",
                        "Test Campaign A",
                        "Other",
                        "Site A",
                        "Today",
                        "Today +1 year"});
#line 175
 testRunner.And("I add campaign(s)", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Amount",
                        "Start date",
                        "End date"});
            table33.AddRow(new string[] {
                        "Test Goal A",
                        "$10,000.00",
                        "Today",
                        "Today +1 year"});
#line 178
 testRunner.And("I add a Goal to \"Test Campaign A\"", ((string)(null)), table33, "And ");
#line 181
 testRunner.When("I edit the campaign hierarchy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 182
 testRunner.And("I add a campaign to the hierarchy for \"Test Campaign A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
 testRunner.And("I use Campaign Search for \"Test Campaign B\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Amount"});
            table34.AddRow(new string[] {
                        "Test Goal A",
                        "$5,000.00"});
#line 184
 testRunner.And("I add Campaign Goal(s) to \"Test Campaign B\"", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Amount",
                        "Start date",
                        "End date"});
            table35.AddRow(new string[] {
                        "Test Goal A",
                        "$5,000.00",
                        "Today",
                        "Today +1 year"});
#line 187
 testRunner.Then("\"Test Campaign B\" Goal tab displays", ((string)(null)), table35, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Fundraiser",
                        "Start date"});
            table36.AddRow(new string[] {
                        "Gary Grey",
                        "Today"});
#line 190
 testRunner.And("\"Test Campaign B\" Fundraisers tab displays", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name"});
            table37.AddRow(new string[] {
                        "Test Campaign A"});
#line 193
 testRunner.And("\"Test Campaign B\" Campaign hierarchy displays", ((string)(null)), table37, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Revenue: Add a payment for an event registration fee with additional donation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Revenue: Add a payment for an event registration fee with additional donation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Revenue")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [NUnit.Framework.CategoryAttribute("Revenue")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Revenue")]
        public virtual void RevenueAddAPaymentForAnEventRegistrationFeeWithAdditionalDonation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Revenue: Add a payment for an event registration fee with additional donation", new string[] {
                        "Ready",
                        "Revenue"});
#line 199
this.ScenarioSetup(scenarioInfo);
#line 200
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table38.AddRow(new string[] {
                        "Bradbury",
                        "Tom",
                        "Mr.",
                        "Tom",
                        "Other"});
#line 201
 testRunner.And("I add individual(s)", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registration type",
                        "Registration count",
                        "Registration fee"});
            table39.AddRow(new string[] {
                        "Adult",
                        "1",
                        "$100.00"});
#line 204
 testRunner.And("Event \"College Reunion\" exists with Registration Option and start date \"Today +6 " +
                    "months\"", ((string)(null)), table39, "And ");
#line 207
 testRunner.And("Constituent \"Tom Bradbury\" is registered for event named \"Test Event\" with \"Adult" +
                    "\" registration option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account system",
                        "Constituent",
                        "Amount",
                        "Date",
                        "Payment method"});
            table40.AddRow(new string[] {
                        "System Generated Account System",
                        "Bradbury",
                        "$150.00",
                        "Today",
                        "Check"});
#line 208
 testRunner.When("I add a batch with template \"Enhanced Revenue Batch\" and description \"ERB Event P" +
                    "ayment\"", ((string)(null)), table40, "When ");
#line 211
 testRunner.And("I select Revenue type \"Payment\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Additional applications",
                        "Applied amount",
                        "Designation"});
            table41.AddRow(new string[] {
                        "Donation",
                        "$50.00",
                        "LIBRARY BOOKS"});
#line 212
 testRunner.And("I add Additional applications", ((string)(null)), table41, "And ");
#line 215
 testRunner.And("I prepare the batch for commit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Batch template",
                        "Description"});
            table42.AddRow(new string[] {
                        "Enhanced Revenue Batch",
                        "ERB Event Payment"});
#line 216
 testRunner.And("I commit the batch", ((string)(null)), table42, "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registrant First Name",
                        "Registrant Last Name",
                        "Balance",
                        "Extra"});
            table43.AddRow(new string[] {
                        "Tom",
                        "Bradbury",
                        "$0.00",
                        ""});
#line 219
 testRunner.Then("Event \"College Reunion\" displays registrant(s) on Registrations tab", ((string)(null)), table43, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment amount",
                        "Date",
                        "Surname",
                        "First Name"});
            table44.AddRow(new string[] {
                        "$100.00",
                        "today",
                        "Bradbury",
                        "Tom"});
#line 222
 testRunner.And("I navigate to payment from Event", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Application",
                        "Amount"});
            table45.AddRow(new string[] {
                        "Event registration",
                        "$100.00"});
            table45.AddRow(new string[] {
                        "Donation",
                        "$50.00"});
#line 225
 testRunner.And("Payment applications details are correct", ((string)(null)), table45, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
