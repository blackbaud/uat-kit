// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SystemTest.Core.Features
{
    using TechTalk.SpecFlow;
    using System.Configuration;
    using OpenQA.Selenium.Chrome;
    using OpenQA.Selenium.Remote;
    using OpenQA.Selenium;
    using System.Collections.Generic;
    using System;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System.IO;
    using System.Drawing.Imaging;
    using ICSharpCode.SharpZipLib.Zip;
    using Blackbaud.UAT.SpecFlow.Selenium;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Batch")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BatchFeature : BaseTest
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        public Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext { get; set; }//;
        
#line 1 "Batch.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Batch", "\tIn order to test batch functionality \r\n\tAs a BBCRM user\r\n\tI want to manage batch" +
                    " records", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Batch")))
            {
                SystemTest.Core.Features.BatchFeature.FeatureSetup(null);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
            SaveChromeArtifacts(IsPass());
            StopDriver();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            ScenarioContext.Current.Add("Test", this);
            ScenarioContext.Current.Add("uniqueStamp", (DateTime.UtcNow.Subtract(new DateTime(1970, 7, 4)).TotalSeconds).ToString());
            StartDriver();
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual bool IsPass()
        {
            Boolean pass = false;
            try { 
                pass = (NUnit.Framework.TestContext.CurrentContext.Result.Status == NUnit.Framework.TestStatus.Passed);
            } catch {
                pass = (TestContext.CurrentTestOutcome == Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed);
            }
            return pass;
        }
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        protected virtual void FeatureSetup()
        {
            FeatureSetup(null);
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch: Process Donation payment for existing constituent via Enhanced Revenue Bat" +
            "ch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Batch: Process Donation payment for existing constituent via Enhanced Revenue Bat" +
            "ch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Batch")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        public virtual void BatchProcessDonationPaymentForExistingConstituentViaEnhancedRevenueBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch: Process Donation payment for existing constituent via Enhanced Revenue Bat" +
                    "ch", null, new string[] {
                        "Ready"});
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table1.AddRow(new string[] {
                        "Baggins",
                        "Benjamin",
                        "Mr.",
                        "Ben",
                        "Other"});
#line 9
 testRunner.And("I add individual(s)", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account system",
                        "Constituent",
                        "Amount",
                        "Date",
                        "Revenue type",
                        "Payment method",
                        "Application",
                        "Designation"});
            table2.AddRow(new string[] {
                        "System Generated Account System",
                        "Baggins",
                        "$100.00",
                        "Today",
                        "Payment",
                        "Check",
                        "Donation",
                        "GARDEN"});
#line 12
 testRunner.When("I add a batch with template \"Enhanced Revenue Batch\" and description \"ERB Event P" +
                    "ayment\"", ((string)(null)), table2, "When ");
#line 15
 testRunner.And("I prepare the batch for commit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Batch template",
                        "Description"});
            table3.AddRow(new string[] {
                        "Enhanced Revenue Batch",
                        "ERB Event Payment"});
#line 16
 testRunner.And("I commit the batch", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "Transaction type",
                        "Amount",
                        "Date"});
            table4.AddRow(new string[] {
                        "Baggins",
                        "Payment",
                        "$100.00",
                        "Today"});
#line 19
 testRunner.And("I search for the transaction", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment amount",
                        "Date"});
            table5.AddRow(new string[] {
                        "$100.00",
                        "Today"});
#line 22
 testRunner.Then("Revenue Transaction Page Transaction Summary for batch payment shows", ((string)(null)), table5, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Application",
                        "Amount"});
            table6.AddRow(new string[] {
                        "Donation",
                        "$100.00"});
#line 25
 testRunner.And("Payment applications details are correct", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch: Split a pledge across 2 designations via Enhanced Revenue Batch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Batch: Split a pledge across 2 designations via Enhanced Revenue Batch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Batch")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        public virtual void BatchSplitAPledgeAcross2DesignationsViaEnhancedRevenueBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch: Split a pledge across 2 designations via Enhanced Revenue Batch", null, new string[] {
                        "Ready"});
#line 30
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 31
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table7.AddRow(new string[] {
                        "Wilson",
                        "Rusell",
                        "Mr.",
                        "Rus",
                        "Other"});
#line 32
 testRunner.And("I add individual", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account system",
                        "Constituent",
                        "Amount",
                        "Date",
                        "Revenue type",
                        "Payment method",
                        "Designation",
                        "Installment frequency",
                        "Installment start date",
                        "No. installments"});
            table8.AddRow(new string[] {
                        "System Generated Account System",
                        "Wilson",
                        "$500.00",
                        "today",
                        "Pledge",
                        "None",
                        "GARDEN",
                        "Monthly",
                        "today",
                        "5"});
#line 35
 testRunner.When("I add a batch with template \"Enhanced Revenue Batch\" and description \"ERB\"", ((string)(null)), table8, "When ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Designation"});
            table9.AddRow(new string[] {
                        "GARDEN"});
            table9.AddRow(new string[] {
                        "Library Fund"});
#line 38
 testRunner.And("split the designations evenly", ((string)(null)), table9, "And ");
#line 42
 testRunner.Then("the \'Designation\' cell value is \'<split>\' for row 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch: Add a payment record applied to the event registration using Enhanced Reve" +
            "nue Batch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Batch: Add a payment record applied to the event registration using Enhanced Reve" +
            "nue Batch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Batch")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        public virtual void BatchAddAPaymentRecordAppliedToTheEventRegistrationUsingEnhancedRevenueBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch: Add a payment record applied to the event registration using Enhanced Reve" +
                    "nue Batch", null, new string[] {
                        "Ready"});
#line 45
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 46
    testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table10.AddRow(new string[] {
                        "Bradbury",
                        "Tom",
                        "Mr.",
                        "Tom",
                        "Other"});
#line 47
 testRunner.And("I add individual(s)", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Start date",
                        "Category",
                        "Registration type",
                        "Registration count",
                        "Registration fee"});
            table11.AddRow(new string[] {
                        "College Reunion",
                        "Today +6 months",
                        "Formal",
                        "Adult",
                        "1",
                        "$100.00"});
#line 50
 testRunner.And("An Event exists that includes Registration Option", ((string)(null)), table11, "And ");
#line 53
 testRunner.And("Constituent \"Tom Bradbury\" is registered for event named \"College Reunion\" with \"" +
                    "Adult\" registration option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account system",
                        "Constituent",
                        "Amount",
                        "Date",
                        "Revenue type",
                        "Payment method",
                        "Application"});
            table12.AddRow(new string[] {
                        "System Generated Account System",
                        "Bradbury",
                        "$100.00",
                        "Today",
                        "Payment",
                        "Check",
                        "College Reunion"});
#line 54
 testRunner.When("I add a batch with template \"Enhanced Revenue Batch\" and description \"ERB Event P" +
                    "ayment\"", ((string)(null)), table12, "When ");
#line 57
 testRunner.And("I prepare the batch for commit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Batch template",
                        "Description"});
            table13.AddRow(new string[] {
                        "Enhanced Revenue Batch",
                        "ERB Event Payment"});
#line 58
 testRunner.And("I commit the batch", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registrant First Name",
                        "Registrant Last Name",
                        "Balance",
                        "Extra"});
            table14.AddRow(new string[] {
                        "Tom",
                        "Bradbury",
                        "$0.00",
                        ""});
#line 61
 testRunner.Then("Event \"College Reunion\" displays registrant(s) on Registrations tab", ((string)(null)), table14, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch: Add a donation payment with multiple designations through a batch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Batch: Add a donation payment with multiple designations through a batch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Batch")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        public virtual void BatchAddADonationPaymentWithMultipleDesignationsThroughABatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch: Add a donation payment with multiple designations through a batch", null, new string[] {
                        "Ready"});
#line 66
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 67
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table15.AddRow(new string[] {
                        "Newton",
                        "Cam",
                        "Mr.",
                        "Cam",
                        "Other"});
#line 68
 testRunner.And("I add individual", ((string)(null)), table15, "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account system",
                        "Constituent",
                        "Amount",
                        "Date",
                        "Revenue type",
                        "Payment method",
                        "GL post status"});
            table16.AddRow(new string[] {
                        "System Generated Account System",
                        "Newton",
                        "$200.00",
                        "today",
                        "Payment",
                        "Cash",
                        "Do not post"});
#line 71
 testRunner.When("I add a batch with template \"Enhanced Revenue Batch\" and description \"Cam\'s donat" +
                    "ion\"", ((string)(null)), table16, "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Additional applications",
                        "Applied amount",
                        "Designation"});
            table17.AddRow(new string[] {
                        "Donation",
                        "$50.00",
                        "Library Fund"});
            table17.AddRow(new string[] {
                        "Donation",
                        "$150.00",
                        "GARDEN"});
#line 74
 testRunner.And("apply the payment to designations", ((string)(null)), table17, "And ");
#line 78
 testRunner.And("I prepare the batch for commit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Batch template",
                        "Description"});
            table18.AddRow(new string[] {
                        "Enhanced Revenue Batch",
                        "Cam\'s donation"});
#line 79
 testRunner.And("I commit the batch", ((string)(null)), table18, "And ");
#line 82
 testRunner.Then("the batch commits without errors or exceptions and 1 record processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Designation",
                        "Recognition credits"});
            table19.AddRow(new string[] {
                        "Library Fund",
                        "$50.00"});
            table19.AddRow(new string[] {
                        "Botanical Garden Fund",
                        "$150.00"});
#line 83
 testRunner.And("the revenue record for \"Newton\" has donations", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch: Add event payment via Enhanced revenue batch for registered attendee made " +
            "by their organisation relationship/employer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Batch: Add event payment via Enhanced revenue batch for registered attendee made " +
            "by their organisation relationship/employer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Batch")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        public virtual void BatchAddEventPaymentViaEnhancedRevenueBatchForRegisteredAttendeeMadeByTheirOrganisationRelationshipEmployer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch: Add event payment via Enhanced revenue batch for registered attendee made " +
                    "by their organisation relationship/employer", null, new string[] {
                        "Ready"});
#line 89
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 90
    testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table20.AddRow(new string[] {
                        "Potter",
                        "Tom",
                        "Mr.",
                        "Tom",
                        "Other"});
#line 91
 testRunner.And("I add individual(s)", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Industry"});
            table21.AddRow(new string[] {
                        "Blackbaud",
                        "Accounting"});
#line 94
 testRunner.And("I add organization(s)", ((string)(null)), table21, "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "Constituent",
                        "Related organization",
                        "Constituent relationship type",
                        "Related organization relationship type",
                        "Start date",
                        "The organization will match contributions for this relationship"});
            table22.AddRow(new string[] {
                        "Tom Potter",
                        "Blackbaud",
                        "Employee",
                        "Employer/Organisation",
                        "today",
                        "false"});
#line 97
 testRunner.And("I add an Organization relationship", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Start date",
                        "Category",
                        "Registration type",
                        "Registration count",
                        "Registration fee"});
            table23.AddRow(new string[] {
                        "College Reunion",
                        "Today +6 months",
                        "Brunch",
                        "Adult",
                        "1",
                        "$200.00"});
#line 100
 testRunner.And("An Event exists that includes Registration Option", ((string)(null)), table23, "And ");
#line 103
 testRunner.And("Constituent \"Tom Potter\" is registered for event named \"College Reunion\" with \"Ad" +
                    "ult\" registration option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account system",
                        "Constituent",
                        "Amount",
                        "Date",
                        "Revenue type",
                        "Payment method"});
            table24.AddRow(new string[] {
                        "System Generated Account System",
                        "Blackbaud",
                        "$200.00",
                        "Today",
                        "Payment",
                        "Check"});
#line 104
 testRunner.When("I add a batch with template \"Enhanced Revenue Batch\" and description \"ERB Event P" +
                    "ayment\"", ((string)(null)), table24, "When ");
#line 107
 testRunner.And("I load commitments for constituent \"Tom Potter\" and apply amount of \"$200.00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 108
 testRunner.And("I prepare the batch for commit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Batch template",
                        "Description"});
            table25.AddRow(new string[] {
                        "Enhanced Revenue Batch",
                        "ERB Event Payment"});
#line 109
 testRunner.And("I commit the batch", ((string)(null)), table25, "And ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registrant First Name",
                        "Registrant Last Name",
                        "Balance",
                        "Extra"});
            table26.AddRow(new string[] {
                        "Tom",
                        "Potter",
                        "$0.00",
                        ""});
#line 112
 testRunner.Then("Event \"College Reunion\" displays registrant(s) on Registrations tab", ((string)(null)), table26, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch: Process payment for existing Pledge commitment on existing constituent via" +
            " Enhanced Revenue Batch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Batch: Process payment for existing Pledge commitment on existing constituent via" +
            " Enhanced Revenue Batch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Batch")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        public virtual void BatchProcessPaymentForExistingPledgeCommitmentOnExistingConstituentViaEnhancedRevenueBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch: Process payment for existing Pledge commitment on existing constituent via" +
                    " Enhanced Revenue Batch", null, new string[] {
                        "Ready"});
#line 117
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 118
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table27.AddRow(new string[] {
                        "Jenkins",
                        "Timothy",
                        "Mr.",
                        "Tim",
                        "Other"});
#line 119
 testRunner.And("I add individual(s)", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "Designation",
                        "Installments",
                        "Date",
                        "Start date",
                        "Frequency",
                        "Installment amount",
                        "Number of Installments",
                        "Post Type"});
            table28.AddRow(new string[] {
                        "$1,200.00",
                        "GARDEN",
                        "Monthly",
                        "Today",
                        "Today",
                        "Monthly",
                        "$100.00",
                        "12",
                        "Do not post"});
#line 122
 testRunner.And("A Pledge has been submitted today for the Constituent \"Timothy Jenkins\" with acco" +
                    "unt system \"System Generated Account System\"", ((string)(null)), table28, "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account system",
                        "Constituent",
                        "Amount",
                        "Date",
                        "Revenue type",
                        "Payment method",
                        "Application"});
            table29.AddRow(new string[] {
                        "System Generated Account System",
                        "Jenkins",
                        "$100.00",
                        "Today",
                        "Payment",
                        "Check",
                        "Pledge for"});
#line 125
 testRunner.When("I add a batch with template \"Enhanced Revenue Batch\" and description \"ERB Event P" +
                    "ayment\"", ((string)(null)), table29, "When ");
#line 128
 testRunner.And("I prepare the batch for commit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "Batch template",
                        "Description"});
            table30.AddRow(new string[] {
                        "Enhanced Revenue Batch",
                        "ERB Event Payment"});
#line 129
 testRunner.And("I commit the batch", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "Transaction type",
                        "Amount",
                        "Date"});
            table31.AddRow(new string[] {
                        "Jenkins",
                        "Payment",
                        "$100.00",
                        "Today"});
#line 132
 testRunner.And("I search for the transaction", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment amount",
                        "Date"});
            table32.AddRow(new string[] {
                        "$100.00",
                        "Today"});
#line 135
 testRunner.Then("Revenue Transaction Page Transaction Summary for batch payment shows", ((string)(null)), table32, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Application",
                        "Amount"});
            table33.AddRow(new string[] {
                        "Pledge",
                        "$100.00"});
#line 138
 testRunner.And("Payment applications details are correct", ((string)(null)), table33, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch: Process payment for existing Recurring Gift commitment on existing constit" +
            "uent via Enhanced Revenue Batch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Batch: Process payment for existing Recurring Gift commitment on existing constit" +
            "uent via Enhanced Revenue Batch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Batch")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        public virtual void BatchProcessPaymentForExistingRecurringGiftCommitmentOnExistingConstituentViaEnhancedRevenueBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch: Process payment for existing Recurring Gift commitment on existing constit" +
                    "uent via Enhanced Revenue Batch", null, new string[] {
                        "Ready"});
#line 143
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 144
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table34.AddRow(new string[] {
                        "Smith",
                        "Frankin",
                        "Mr.",
                        "Frank",
                        "Other"});
#line 145
 testRunner.And("I add individual", ((string)(null)), table34, "And ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "Amount",
                        "Designations",
                        "Date",
                        "Installment frequency",
                        "Installment schedule begins",
                        "End date (optional)",
                        "Payment method"});
            table35.AddRow(new string[] {
                        "$100.00",
                        "GARDEN",
                        "Today",
                        "Monthly",
                        "Today",
                        "",
                        "None"});
#line 148
 testRunner.And("I add a Recurring gift to constituent \"Smith\"", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account system",
                        "Constituent",
                        "Amount",
                        "Date",
                        "Revenue type",
                        "Payment method",
                        "Application"});
            table36.AddRow(new string[] {
                        "System Generated Account System",
                        "Smith",
                        "$100.00",
                        "Today",
                        "Payment",
                        "Check",
                        "Recurring gift"});
#line 151
 testRunner.When("I add a batch with template \"Enhanced Revenue Batch\" and description \"ERB\"", ((string)(null)), table36, "When ");
#line 154
 testRunner.And("I prepare the batch for commit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Batch template",
                        "Description"});
            table37.AddRow(new string[] {
                        "Enhanced Revenue Batch",
                        "ERB"});
#line 155
 testRunner.And("I commit the batch", ((string)(null)), table37, "And ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "Transaction type",
                        "Amount",
                        "Date"});
            table38.AddRow(new string[] {
                        "Smith",
                        "Payment",
                        "$100.00",
                        "Today"});
#line 158
 testRunner.And("I search for the transaction", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment amount",
                        "Date"});
            table39.AddRow(new string[] {
                        "$100.00",
                        "Today"});
#line 161
 testRunner.Then("Revenue Transaction Page Transaction Summary for batch payment shows", ((string)(null)), table39, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "Application",
                        "Amount"});
            table40.AddRow(new string[] {
                        "Recurring gift",
                        "$100.00"});
#line 164
 testRunner.And("Payment applications details are correct", ((string)(null)), table40, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Batch: Add a pledge with the GL post status \"Do not post\" via Enhanced Revenue Ba" +
            "tch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Batch: Add a pledge with the GL post status \"Do not post\" via Enhanced Revenue Ba" +
            "tch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Batch")]
        [NUnit.Framework.CategoryAttribute("Ready")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Ready")]
        public virtual void BatchAddAPledgeWithTheGLPostStatusDoNotPostViaEnhancedRevenueBatch()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch: Add a pledge with the GL post status \"Do not post\" via Enhanced Revenue Ba" +
                    "tch", null, new string[] {
                        "Ready"});
#line 169
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 170
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "First name",
                        "Title",
                        "Nickname",
                        "Information source"});
            table41.AddRow(new string[] {
                        "Vegesna",
                        "Bob",
                        "Mr.",
                        "Bob",
                        "Other"});
#line 171
 testRunner.And("I add individual", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "Account system",
                        "Constituent",
                        "Amount",
                        "Date",
                        "Revenue type",
                        "Payment method",
                        "Designation",
                        "GL post status",
                        "Installment frequency",
                        "Installment start date"});
            table42.AddRow(new string[] {
                        "System Generated Account System",
                        "Vegesna",
                        "$500",
                        "Today",
                        "Pledge",
                        "Credit card",
                        "GARDEN",
                        "Do not post",
                        "Single Installment",
                        "Today +7 days"});
#line 174
 testRunner.When("I add a batch with template \"Enhanced Revenue Batch\" and description \"ERB do not " +
                    "post pledge\"", ((string)(null)), table42, "When ");
#line 177
 testRunner.And("I prepare the batch for commit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "Batch template",
                        "Description"});
            table43.AddRow(new string[] {
                        "Enhanced Revenue Batch",
                        "ERB do not post pledge"});
#line 178
 testRunner.And("I commit the batch", ((string)(null)), table43, "And ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "Last name",
                        "Transaction type",
                        "Date",
                        "Amount"});
            table44.AddRow(new string[] {
                        "Vegesna",
                        "Pledge",
                        "Today",
                        "$500.00"});
#line 181
 testRunner.And("I navigate to pledge", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Constituent",
                        "Post status"});
            table45.AddRow(new string[] {
                        "Bob Vegesna",
                        "Do not post"});
#line 184
 testRunner.Then("the transaction summary shows", ((string)(null)), table45, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

