// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using Blackbaud.UAT.SpecFlow.Selenium;
using TechTalk.SpecFlow;

#pragma warning disable

namespace BlackbaudDemo40.CRMFeatures
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DirectMarketing")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DirectMarketingFeature : BaseTest
    {
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        public Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext { get; set; } //;

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            var featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"),
                "DirectMarketing",
                "In order to validate Direct Marketing functionality\r\nAs a user of BBCRM\r\nI want t" +
                "o add, modify, and validate Marketing processes", ProgrammingLanguage.CSharp, ((string[]) (null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.TestFixtureTearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null)
                 && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "DirectMarketing")))
            {
                FeatureSetup(null);
            }
        }

        [NUnit.Framework.TearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
            SaveChromeArtifacts(IsPass());
            StopDriver();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            ScenarioContext.Current.Add("Test", this);
            StartDriver();
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        public virtual bool IsPass()
        {
            var pass = false;
            try
            {
                pass = (NUnit.Framework.TestContext.CurrentContext.Result.Status == NUnit.Framework.TestStatus.Passed);
            }
            catch
            {
                pass = (TestContext.CurrentTestOutcome ==
                        Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed);
            }
            return pass;
        }

        [NUnit.Framework.TestFixtureSetUpAttribute()]
        protected virtual void FeatureSetup()
        {
            FeatureSetup(null);
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Run receipt process that marks transaction receipted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(
            "Run receipt process that marks transaction receipted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DirectMarketing")]
        [NUnit.Framework.CategoryAttribute("DirectMarketing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("DirectMarketing")]
        public virtual void RunReceiptProcessThatMarksTransactionReceipted()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(
                "Run receipt process that marks transaction receipted", new string[]
                {
                    "DirectMarketing"
                });
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line hidden
            var table1 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Last name",
                "Address type",
                "Country",
                "Address",
                "City",
                "State",
                "ZIP",
                "Email type",
                "Email address"
            });
            table1.AddRow(new string[]
            {
                "Norman Rockwell",
                "Home",
                "United States",
                "1990 Daniel Island Dr",
                "Charleston",
                "SC",
                "29407",
                "Email",
                "testemail@blackbaud.com"
            });
#line 9
            testRunner.And("constituent exists", ((string) (null)), table1, "And ");
#line hidden
            var table2 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Constituent",
                "Amount",
                "Date"
            });
            table2.AddRow(new string[]
            {
                "Norman Rockwell",
                "$100.00",
                "1/1/2015"
            });
#line 12
            testRunner.And("I start to add a payment", ((string) (null)), table2, "And ");
#line hidden
            var table3 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Application",
                "Applied",
                "Designation"
            });
            table3.AddRow(new string[]
            {
                "Donation",
                "$100.00",
                "Camp Kids Scholarship"
            });
#line 15
            testRunner.And("add applications to the payment", ((string) (null)), table3, "And ");
#line 18
            testRunner.And("save the the payment", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table4 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Output format",
                "Mark revenue \'Receipted\' when process completes"
            });
            table4.AddRow(new string[]
            {
                "Receipt Process",
                "Email receipt output",
                "true"
            });
#line 19
            testRunner.When("I create a receipt process", ((string) (null)), table4, "When ");
#line hidden
            var table5 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Output format"
            });
            table5.AddRow(new string[]
            {
                "Receipt Process",
                "Email receipt output"
            });
#line 22
            testRunner.And("run receipt process", ((string) (null)), table5, "And ");
#line 25
            testRunner.Then("the revenue record for \'Norman Rockwell\' is marked as receipted", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Marketing Acknowledgement Template")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add Marketing Acknowledgement Template")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DirectMarketing")]
        [NUnit.Framework.CategoryAttribute("DirectMarketing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("DirectMarketing")]
        public virtual void AddMarketingAcknowledgementTemplate()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Marketing Acknowledgement Template", new string[]
            {
                "DirectMarketing"
            });
#line 28
            this.ScenarioSetup(scenarioInfo);
#line 29
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line hidden
            var table6 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Description"
            });
            table6.AddRow(new string[]
            {
                "Test Template",
                "Test"
            });
#line 30
            testRunner.And("marketing acknowledgement template does not exist", ((string) (null)), table6, "And ");
#line 33
            testRunner.When("I start to add a marketing acknowledgement template", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line hidden
            var table7 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Description",
                "Assign letters based on segmentation",
                "Mark letters \'Acknowledged/Receipted\' when process completes"
            });
            table7.AddRow(new string[]
            {
                "Test Template",
                "Test",
                "true",
                "checked"
            });
#line 34
            testRunner.And("set the general tab\'s fields", ((string) (null)), table7, "And ");
#line 37
            testRunner.And("set the source code to \'Automation source code layout 1\'", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 38
            testRunner.And("set universe tab to include all records", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table8 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Activate and export marketing acknowledgement when template processing completes",
                "Appeal"
            });
            table8.AddRow(new string[]
            {
                "checked",
                "CAMP LETTER"
            });
#line 39
            testRunner.And("set the activation tab\'s fields", ((string) (null)), table8, "And ");
#line 42
            testRunner.And("save the template", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table9 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Description"
            });
            table9.AddRow(new string[]
            {
                "Test Template",
                "Test"
            });
#line 43
            testRunner.Then("a marketing acknowledgement template exists", ((string) (null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Process Marketing Acknowledgement Effort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Process Marketing Acknowledgement Effort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DirectMarketing")]
        [NUnit.Framework.CategoryAttribute("DirectMarketing")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("DirectMarketing")]
        public virtual void ProcessMarketingAcknowledgementEffort()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Process Marketing Acknowledgement Effort",
                new string[]
                {
                    "DirectMarketing"
                });
#line 48
            this.ScenarioSetup(scenarioInfo);
#line 49
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 50
            testRunner.And("constituent \'James Harden\' exists", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "And ");
#line hidden
            var table10 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Constituent",
                "Amount",
                "Date"
            });
            table10.AddRow(new string[]
            {
                "James Harden",
                "$100.00",
                "2/2/2015"
            });
#line 51
            testRunner.And("I start to add a payment", ((string) (null)), table10, "And ");
#line hidden
            var table11 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Application",
                "Applied",
                "Designation"
            });
            table11.AddRow(new string[]
            {
                "Donation",
                "$100.00",
                "Camp Kids Scholarship"
            });
#line 54
            testRunner.And("add applications to the payment", ((string) (null)), table11, "And ");
#line 57
            testRunner.And("save the the payment", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 58
            testRunner.And("unacknowledged revenue query \'Unacknowledged Revenue\' exists", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table12 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Description"
            });
            table12.AddRow(new string[]
            {
                "Unacknowledged Revenue Template",
                "URT"
            });
#line 59
            testRunner.And("marketing acknowledgement template does not exist", ((string) (null)), table12, "And ");
#line 62
            testRunner.And("segment \'Unacknowledged Revenue Segment\' does not exist with activated marketing " +
                           "effort template \'Unacknowledged Revenue Template\'", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 63
            testRunner.And("a static selection copy \'Static Selection Unacknowledged Revenue\' of query \'Unack" +
                           "nowledged Revenue\' exists", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table13 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name"
            });
            table13.AddRow(new string[]
            {
                "Unacknowledged Revenue Segment"
            });
#line 64
            testRunner.And("\'Revenue segment\' segment exists with selection \'Static Selection Unacknowledged " +
                           "Revenue\'", ((string) (null)), table13, "And ");
#line hidden
            var table14 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Letter"
            });
            table14.AddRow(new string[]
            {
                "Unacknowledged Revenued Mail Package",
                "Automation acknowledgement letter 2"
            });
#line 67
            testRunner.And("a mail package exists with", ((string) (null)), table14, "And ");
#line 70
            testRunner.And("I start to add a marketing acknowledgement template", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table15 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Description",
                "Assign letters based on segmentation",
                "Mark letters \'Acknowledged/Receipted\' when process completes"
            });
            table15.AddRow(new string[]
            {
                "Unacknowledged Revenue Template",
                "URT",
                "true",
                "checked"
            });
#line 71
            testRunner.And("set the general tab\'s fields", ((string) (null)), table15, "And ");
#line 74
            testRunner.And("set the source code to \'Automation source code layout 1\'", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 75
            testRunner.And("set universe tab to include all records", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table16 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Activate and export marketing acknowledgement when template processing completes",
                "Appeal"
            });
            table16.AddRow(new string[]
            {
                "checked",
                "CAMP LETTER"
            });
#line 76
            testRunner.And("set the activation tab\'s fields", ((string) (null)), table16, "And ");
#line 79
            testRunner.And("save the template", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table17 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Segment",
                "Package"
            });
            table17.AddRow(new string[]
            {
                "Unacknowledged Revenue Segment",
                "Unacknowledged Revenued Mail Package"
            });
#line 80
            testRunner.When("I start to add an acknowledgement rule to the current marketing acknowledgement t" +
                            "emplate", ((string) (null)), table17, "When ");
#line 83
            testRunner.And("I save the acknowledgement rule accepting the 3 source code changes", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 84
            testRunner.And("I run marketing acknowledgement process", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 85
            testRunner.Then("the marketing process completes without errors or exceptions", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 86
            testRunner.And("the revenue record for \'James Harden\' is marked as acknowledged", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}

#pragma warning restore

#endregion