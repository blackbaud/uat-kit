// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using Blackbaud.UAT.SpecFlow.Selenium;
using TechTalk.SpecFlow;

#pragma warning disable

namespace BlackbaudDemo40.CRMFeatures
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Constituents")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ConstituentsFeature : BaseTest
    {
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        public Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext { get; set; } //;

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            var featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"),
                "Constituents", "In order to validate Constituent functionality\nAs a user of BBCRM\nI want to add, " +
                                "search, and validate constituent values", ProgrammingLanguage.CSharp,
                ((string[]) (null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.TestFixtureTearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null)
                 && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Constituents")))
            {
                FeatureSetup(null);
            }
        }

        [NUnit.Framework.TearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
            SaveChromeArtifacts(IsPass());
            StopDriver();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            ScenarioContext.Current.Add("Test", this);
            StartDriver();
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        public virtual bool IsPass()
        {
            var pass = false;
            try
            {
                pass = (NUnit.Framework.TestContext.CurrentContext.Result.Status == NUnit.Framework.TestStatus.Passed);
            }
            catch
            {
                pass = (TestContext.CurrentTestOutcome ==
                        Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed);
            }
            return pass;
        }

        [NUnit.Framework.TestFixtureSetUpAttribute()]
        protected virtual void FeatureSetup()
        {
            FeatureSetup(null);
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Constituents")]
        [NUnit.Framework.CategoryAttribute("Constituents")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Constituents")]
        public virtual void AddAConstituent()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a Constituent", new string[]
            {
                "Constituents"
            });
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 9
            testRunner.When("I add constituent \"Constituent_471048\"", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 10
            testRunner.Then("constituent \"Constituent_471048\" is created", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Edit a Constituent in a batch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit a Constituent in a batch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Constituents")]
        public virtual void EditAConstituentInABatch()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit a Constituent in a batch", ((string[]) (null)));
#line 12
            this.ScenarioSetup(scenarioInfo);
#line 13
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 14
            testRunner.And("constituent \'Philip Rivers\' exists", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "And ");
#line hidden
            var table1 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Account system",
                "Constituent",
                "Amount",
                "Date",
                "Revenue type",
                "Payment method",
                "Designation",
                "GL post status"
            });
            table1.AddRow(new string[]
            {
                "System Generated Account System",
                "Philip Rivers",
                "$100.00",
                "1/1/2015",
                "Pledge",
                "None",
                "Camp Kids Scholarship",
                "Do not post"
            });
#line 15
            testRunner.When("I start to add a batch with template \"Enhanced Revenue Batch\" and description \"Ed" +
                            "it Philip\"", ((string) (null)), table1, "When ");
#line hidden
            var table2 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Title",
                "Birth date",
                "State"
            });
            table2.AddRow(new string[]
            {
                "Admiral",
                "12/25/1990",
                "SC"
            });
#line 18
            testRunner.And("edit the selected constituent", ((string) (null)), table2, "And ");
#line hidden
            var table3 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Batch template",
                "Description"
            });
            table3.AddRow(new string[]
            {
                "Enhanced Revenue Batch",
                "Edit Philip"
            });
#line 21
            testRunner.And("save the batch and commit it", ((string) (null)), table3, "And ");
#line 24
            testRunner.Then("the batch commits without errors or exceptions and 1 record processed", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line 25
            testRunner.And("constituent \'Philip Rivers\' has the title \'Admiral\', birth date \'12/25/1990\' and " +
                           "state address \'SC\'", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}

#pragma warning restore

#endregion