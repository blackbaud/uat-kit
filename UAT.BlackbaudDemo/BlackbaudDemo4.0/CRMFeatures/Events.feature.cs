// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using Blackbaud.UAT.SpecFlow.Selenium;
using TechTalk.SpecFlow;

#pragma warning disable

namespace BlackbaudDemo40.CRMFeatures
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Events")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class EventsFeature : BaseTest
    {
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        public Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext { get; set; } //;

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            var featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Events",
                "In order to validate Events functionality\r\nAs a user of BBCRM\r\nI want to add, mod" +
                "ify, and validate Events", ProgrammingLanguage.CSharp, ((string[]) (null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.TestFixtureTearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null)
                 && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Events")))
            {
                FeatureSetup(null);
            }
        }

        [NUnit.Framework.TearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
            SaveChromeArtifacts(IsPass());
            StopDriver();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            ScenarioContext.Current.Add("Test", this);
            StartDriver();
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        public virtual bool IsPass()
        {
            var pass = false;
            try
            {
                pass = (NUnit.Framework.TestContext.CurrentContext.Result.Status == NUnit.Framework.TestStatus.Passed);
            }
            catch
            {
                pass = (TestContext.CurrentTestOutcome ==
                        Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed);
            }
            return pass;
        }

        [NUnit.Framework.TestFixtureSetUpAttribute()]
        protected virtual void FeatureSetup()
        {
            FeatureSetup(null);
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add an Event with a Location")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add an Event with a Location")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddAnEventWithALocation()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add an Event with a Location", new string[]
            {
                "Events"
            });
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 9
            testRunner.And("Location \"Exhibit Hall\" exists", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "And ");
#line hidden
            var table1 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Start date",
                "Location"
            });
            table1.AddRow(new string[]
            {
                "Event_469108",
                "1/1/2015",
                "Exhibit Hall"
            });
#line 10
            testRunner.When("I add events", ((string) (null)), table1, "When ");
#line 13
            testRunner.Then("an event exists with the name \'Event_469108\', start date \'1/1/2015\', and location" +
                            " \'Exhibit Hall\'", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a Coordinator to an Event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a Coordinator to an Event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddACoordinatorToAnEvent()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a Coordinator to an Event", new string[]
            {
                "Events"
            });
#line 16
            this.ScenarioSetup(scenarioInfo);
#line 17
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line hidden
            var table2 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Start date"
            });
            table2.AddRow(new string[]
            {
                "Event_469105",
                "1/1/2015"
            });
#line 18
            testRunner.And("an event exists", ((string) (null)), table2, "And ");
#line 21
            testRunner.And("staff constituent \"Constituent_469105\" exists", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 22
            testRunner.When("I add coordinator \'Constituent_469105\' to event \'Event_469105\'", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 23
            testRunner.Then("\'Constituent_469105\' is a coordinator for event \'Event_469105\'", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a multilevel Event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a multilevel Event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddAMultilevelEvent()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a multilevel Event", new string[]
            {
                "Events"
            });
#line 26
            this.ScenarioSetup(scenarioInfo);
#line 27
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line hidden
            var table3 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Start date"
            });
            table3.AddRow(new string[]
            {
                "Event1_469106",
                "1/1/2015"
            });
            table3.AddRow(new string[]
            {
                "Event2_469106",
                "1/1/2015"
            });
            table3.AddRow(new string[]
            {
                "Event3_469106",
                "1/1/2015"
            });
#line 28
            testRunner.And("an event exists", ((string) (null)), table3, "And ");
#line 33
            testRunner.And("event management template \"AddMultiTemplate\" exists", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table4 = new TechTalk.SpecFlow.Table(new string[]
            {
                "event",
                "parent"
            });
            table4.AddRow(new string[]
            {
                "Event1_469106",
                ""
            });
            table4.AddRow(new string[]
            {
                "Event2_469106",
                "Event1_469106"
            });
            table4.AddRow(new string[]
            {
                "Event3_469106",
                "Event2_469106"
            });
#line 34
            testRunner.When("I create a multi-event using template \"AddMultiTemplate\"", ((string) (null)), table4,
                "When ");
#line hidden
            var table5 = new TechTalk.SpecFlow.Table(new string[]
            {
                "event",
                "parent"
            });
            table5.AddRow(new string[]
            {
                "Event1_469106",
                ""
            });
            table5.AddRow(new string[]
            {
                "Event2_469106",
                "Event1_469106"
            });
            table5.AddRow(new string[]
            {
                "Event3_469106",
                "Event2_469106"
            });
#line 39
            testRunner.Then("a multi-level event \"Event1_469106 - Default Summary\" exists with hierarchy",
                ((string) (null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Registration options to an Event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add Registration options to an Event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddRegistrationOptionsToAnEvent()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Registration options to an Event", new string[]
            {
                "Events"
            });
#line 46
            this.ScenarioSetup(scenarioInfo);
#line 47
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line hidden
            var table6 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Start date"
            });
            table6.AddRow(new string[]
            {
                "Event_469109",
                "1/1/2015"
            });
#line 48
            testRunner.And("an event exists", ((string) (null)), table6, "And ");
#line hidden
            var table7 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Registration type",
                "Name"
            });
            table7.AddRow(new string[]
            {
                "Adult",
                "Full Price"
            });
#line 51
            testRunner.When("I add a registration option to event \'Event_469109\'", ((string) (null)), table7, "When ");
#line hidden
            var table8 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Registration type",
                "Name"
            });
            table8.AddRow(new string[]
            {
                "Adult",
                "Full Price"
            });
#line 54
            testRunner.Then("event \"Event_469109\" has registration option", ((string) (null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add multiple Registration options to Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add multiple Registration options to Events"
            )]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddMultipleRegistrationOptionsToEvents()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add multiple Registration options to Events",
                new string[]
                {
                    "Events"
                });
#line 59
            this.ScenarioSetup(scenarioInfo);
#line 60
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line hidden
            var table9 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Start date"
            });
            table9.AddRow(new string[]
            {
                "Event1_473412",
                "1/1/2015"
            });
#line 61
            testRunner.And("an event exists", ((string) (null)), table9, "And ");
#line hidden
            var table10 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Start date"
            });
            table10.AddRow(new string[]
            {
                "Event2_473412",
                "1/1/2015"
            });
#line 64
            testRunner.And("an event exists", ((string) (null)), table10, "And ");
#line hidden
            var table11 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Registration type",
                "Name"
            });
            table11.AddRow(new string[]
            {
                "Adult",
                "Adult"
            });
            table11.AddRow(new string[]
            {
                "Child",
                "Child"
            });
#line 67
            testRunner.When("I add a registration option to event \'Event1_473412\'", ((string) (null)), table11,
                "When ");
#line hidden
            var table12 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Registration type",
                "Name"
            });
            table12.AddRow(new string[]
            {
                "Couple",
                "Couple"
            });
            table12.AddRow(new string[]
            {
                "Hole-in-One Sponsor",
                "Hole-in-One Sponsor"
            });
#line 71
            testRunner.And("I add a registration option to event \'Event2_473412\'", ((string) (null)), table12, "And ");
#line hidden
            var table13 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Registration type",
                "Name"
            });
            table13.AddRow(new string[]
            {
                "Adult",
                "Adult"
            });
            table13.AddRow(new string[]
            {
                "Child",
                "Child"
            });
#line 75
            testRunner.Then("event \"Event1_473412\" has registration option", ((string) (null)), table13, "Then ");
#line hidden
            var table14 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Registration type",
                "Name"
            });
            table14.AddRow(new string[]
            {
                "Couple",
                "Couple"
            });
            table14.AddRow(new string[]
            {
                "Hole-in-One Sponsor",
                "Hole-in-One Sponsor"
            });
#line 79
            testRunner.And("event \"Event2_473412\" has registration option", ((string) (null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Copy Registration options to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Copy Registration options to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void CopyRegistrationOptionsToAnEvent()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Copy Registration options to an event", new string[]
            {
                "Events"
            });
#line 85
            this.ScenarioSetup(scenarioInfo);
#line 86
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line hidden
            var table15 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Start date"
            });
            table15.AddRow(new string[]
            {
                "Event1_473432",
                "1/1/2015"
            });
#line 87
            testRunner.And("an event exists", ((string) (null)), table15, "And ");
#line hidden
            var table16 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Registration type"
            });
            table16.AddRow(new string[]
            {
                "Adult",
                "Adult"
            });
            table16.AddRow(new string[]
            {
                "Child",
                "Child"
            });
#line 90
            testRunner.And("event \'Event1_473432\' has registration option", ((string) (null)), table16, "And ");
#line hidden
            var table17 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Start date"
            });
            table17.AddRow(new string[]
            {
                "Event2_473432",
                "1/1/2015"
            });
#line 94
            testRunner.And("an event exists", ((string) (null)), table17, "And ");
#line 97
            testRunner.When("I copy registration options from \'Event1_473432\' to \'Event2_473432\'", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line hidden
            var table18 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Registration type"
            });
            table18.AddRow(new string[]
            {
                "Adult",
                "Adult"
            });
            table18.AddRow(new string[]
            {
                "Child",
                "Child"
            });
#line 98
            testRunner.Then("event \"Event2_473432\" has registration option", ((string) (null)), table18, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add an Expense to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add an Expense to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddAnExpenseToAnEvent()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add an Expense to an event", new string[]
            {
                "Events"
            });
#line 104
            this.ScenarioSetup(scenarioInfo);
#line 105
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line hidden
            var table19 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Start date"
            });
            table19.AddRow(new string[]
            {
                "Event_473517",
                "1/1/2015"
            });
#line 106
            testRunner.And("an event exists", ((string) (null)), table19, "And ");
#line 109
            testRunner.And("constituent \'Constituent_473517\' exists", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table20 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Type",
                "Vendor",
                "Budgeted amount",
                "Comment"
            });
            table20.AddRow(new string[]
            {
                "Entertainment",
                "Constituent_473517",
                "$1,500.00",
                "Meal"
            });
#line 110
            testRunner.When("I add expense to \'Event_473517\'", ((string) (null)), table20, "When ");
#line hidden
            var table21 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Type",
                "Vendor",
                "Budgeted amount",
                "Comment"
            });
            table21.AddRow(new string[]
            {
                "Entertainment",
                "Constituent_473517",
                "$1,500.00",
                "Meal"
            });
#line 113
            testRunner.Then("event \'Event_473517\' has expense", ((string) (null)), table21, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a Task with Reminder to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a Task with Reminder to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddATaskWithReminderToAnEvent()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a Task with Reminder to an event", new string[]
            {
                "Events"
            });
#line 118
            this.ScenarioSetup(scenarioInfo);
#line 119
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line hidden
            var table22 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Start date"
            });
            table22.AddRow(new string[]
            {
                "Event_473577",
                "1/1/2015"
            });
#line 120
            testRunner.And("an event exists", ((string) (null)), table22, "And ");
#line 123
            testRunner.And("constituent \'Constituent_473577\' exists", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table23 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Comment",
                "Owner",
                "Date due"
            });
            table23.AddRow(new string[]
            {
                "Send Invitations",
                "Prepare invitations",
                "Constituent_473577",
                "1/1/2050"
            });
#line 124
            testRunner.When("I add a task to event \'Event_473577\'", ((string) (null)), table23, "When ");
#line hidden
            var table24 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Date"
            });
            table24.AddRow(new string[]
            {
                "Reminder 1",
                "1/1/2015"
            });
#line 127
            testRunner.And("add reminder to task \'Send Invitations\' on event \'Event_473577\'", ((string) (null)),
                table24, "And ");
#line 130
            testRunner.Then("reminder \'Reminder 1 (1/1/2015)\' exists for task \'Send Invitations\'", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a 2 Level multi-level Event record")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a 2 Level multi-level Event record")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddA2LevelMulti_LevelEventRecord()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a 2 Level multi-level Event record", new string[]
            {
                "Events"
            });
#line 133
            this.ScenarioSetup(scenarioInfo);
#line 134
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 135
            testRunner.And("Location \"Exhibit Hall\" exists", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "And ");
#line hidden
            var table25 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Start date"
            });
            table25.AddRow(new string[]
            {
                "Alumni Weekend 2015",
                "5/4/2015"
            });
            table25.AddRow(new string[]
            {
                "Saturday Daytime with lunch",
                "5/4/2015"
            });
            table25.AddRow(new string[]
            {
                "Saturday Daytime",
                "5/4/2015"
            });
            table25.AddRow(new string[]
            {
                "Saturday night with B&B (single)",
                "5/4/2015"
            });
            table25.AddRow(new string[]
            {
                "Saturday night with B&B (double)",
                "5/4/2015"
            });
#line 136
            testRunner.And("an event exists", ((string) (null)), table25, "And ");
#line 143
            testRunner.And("event management template \"AddMultiTemplate\" exists", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table26 = new TechTalk.SpecFlow.Table(new string[]
            {
                "event",
                "parent"
            });
            table26.AddRow(new string[]
            {
                "Alumni Weekend 2015",
                ""
            });
            table26.AddRow(new string[]
            {
                "Saturday Daytime with lunch",
                "Alumni Weekend 2015"
            });
            table26.AddRow(new string[]
            {
                "Saturday Daytime",
                "Alumni Weekend 2015"
            });
            table26.AddRow(new string[]
            {
                "Saturday night with B&B (single)",
                "Alumni Weekend 2015"
            });
            table26.AddRow(new string[]
            {
                "Saturday night with B&B (double)",
                "Alumni Weekend 2015"
            });
#line 144
            testRunner.When("I start to create a multi-event using template \"AddMultiTemplate\"", ((string) (null)),
                table26, "When ");
#line 151
            testRunner.And("I copy from a sub-event \"Saturday Daytime with lunch\" and name it \"Sunday Daytime" +
                           " with lunch\" under \"Alumni Weekend 2015\"", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table27 = new TechTalk.SpecFlow.Table(new string[]
            {
                "event",
                "parent"
            });
            table27.AddRow(new string[]
            {
                "Alumni Weekend 2015",
                ""
            });
            table27.AddRow(new string[]
            {
                "Saturday Daytime with lunch",
                "Alumni Weekend 2015"
            });
            table27.AddRow(new string[]
            {
                "Saturday Daytime",
                "Alumni Weekend 2015"
            });
            table27.AddRow(new string[]
            {
                "Saturday night with B&B (single)",
                "Alumni Weekend 2015"
            });
            table27.AddRow(new string[]
            {
                "Saturday night with B&B (double)",
                "Alumni Weekend 2015"
            });
            table27.AddRow(new string[]
            {
                "Sunday Daytime with lunch",
                "Alumni Weekend 2015"
            });
#line 152
            testRunner.Then("a multi-level event \"Alumni Weekend 2015 - Default Summary\" exists with hierarchy" +
                            "", ((string) (null)), table27, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Dietary Preferences to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add Dietary Preferences to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddDietaryPreferencesToAnEvent()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Dietary Preferences to an event", new string[]
            {
                "Events"
            });
#line 162
            this.ScenarioSetup(scenarioInfo);
#line 163
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line hidden
            var table28 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Start date"
            });
            table28.AddRow(new string[]
            {
                "Saturday Daytime with lunch",
                "5/4/2015"
            });
#line 164
            testRunner.And("an event exists", ((string) (null)), table28, "And ");
#line hidden
            var table29 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Options"
            });
            table29.AddRow(new string[]
            {
                "Vegetarian"
            });
            table29.AddRow(new string[]
            {
                "Vegan"
            });
            table29.AddRow(new string[]
            {
                "Nut allergy"
            });
#line 167
            testRunner.When("I add preference \"Dietary Preferences\" to event \"Saturday Daytime with lunch\"",
                ((string) (null)), table29, "When ");
#line hidden
            var table30 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Options"
            });
            table30.AddRow(new string[]
            {
                "Dietary Preferences",
                "Nut allergy; Vegan; Vegetarian"
            });
#line 172
            testRunner.Then("event \"Saturday Daytime with lunch\" has a preference with options", ((string) (null)),
                table30, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a registrant and guest to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a registrant and guest to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddARegistrantAndGuestToAnEvent()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a registrant and guest to an event", new string[]
            {
                "Events"
            });
#line 177
            this.ScenarioSetup(scenarioInfo);
#line 178
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 179
            testRunner.And("constituent \'Puppy Enthusiast\' exists", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table31 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Start date"
            });
            table31.AddRow(new string[]
            {
                "Puppy Parade",
                "1/1/2015"
            });
#line 180
            testRunner.And("an event exists", ((string) (null)), table31, "And ");
#line hidden
            var table32 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Registration type",
                "Name",
                "Registration count",
                "Registration fee"
            });
            table32.AddRow(new string[]
            {
                "Adult",
                "Adult +1",
                "2",
                "$20.00"
            });
#line 183
            testRunner.And("event \'Puppy Parade\' has registration option", ((string) (null)), table32, "And ");
#line hidden
            var table33 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Registration option",
                "Registrant"
            });
            table33.AddRow(new string[]
            {
                "Adult +1",
                "Puppy Enthusiast"
            });
            table33.AddRow(new string[]
            {
                "Adult +1",
                "(Unnamed guest)"
            });
#line 186
            testRunner.When("I add registrant \'Puppy Enthusiast\' to event \'Puppy Parade\'", ((string) (null)),
                table33, "When ");
#line 190
            testRunner.Then("registrant record \'Puppy Enthusiast\' is created for event \'Puppy Parade\' with 1 g" +
                            "uest", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}

#pragma warning restore

#endregion