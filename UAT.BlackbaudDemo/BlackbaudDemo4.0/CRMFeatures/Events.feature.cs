// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BlackbaudDemo40.CRMFeatures
{
    using TechTalk.SpecFlow;
    using System.Configuration;
    using OpenQA.Selenium.Chrome;
    using OpenQA.Selenium.Remote;
    using OpenQA.Selenium;
    using System.Collections.Generic;
    using System;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System.IO;
    using System.Drawing.Imaging;
    using ICSharpCode.SharpZipLib.Zip;
    using Blackbaud.UAT.SpecFlow.Selenium;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Events")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class EventsFeature : BaseTest
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        public Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext { get; set; }//;
        
#line 1 "Events.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Events", "\tIn order to validate Events functionality\r\n\tAs a user of BBCRM\r\n\tI want to add, " +
                    "modify, and validate Events", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Events")))
            {
                BlackbaudDemo40.CRMFeatures.EventsFeature.FeatureSetup(null);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
            SaveChromeArtifacts(IsPass());
            StopDriver();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            ScenarioContext.Current.Add("Test", this);
            ScenarioContext.Current.Add("uniqueStamp", (DateTime.UtcNow.Subtract(new DateTime(1970, 7, 4)).TotalSeconds).ToString());
            StartDriver();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual bool IsPass()
        {
            Boolean pass = false;
            try { 
                pass = (NUnit.Framework.TestContext.CurrentContext.Result.Status == NUnit.Framework.TestStatus.Passed);
            } catch {
                pass = (TestContext.CurrentTestOutcome == Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed);
            }
            return pass;
        }
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        protected virtual void FeatureSetup()
        {
            FeatureSetup(null);
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add an Event with a Location")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add an Event with a Location")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddAnEventWithALocation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add an Event with a Location", new string[] {
                        "Events"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("Location \"Exhibit Hall\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Start date",
                        "Location"});
            table1.AddRow(new string[] {
                        "Event_469108",
                        "01/01/2015",
                        "Exhibit Hall"});
#line 10
 testRunner.When("I add events", ((string)(null)), table1, "When ");
#line 13
 testRunner.Then("an event exists with the name \'Event_469108\', start date \'01/01/2015\', and locati" +
                    "on \'Exhibit Hall\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a Coordinator to an Event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a Coordinator to an Event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddACoordinatorToAnEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a Coordinator to an Event", new string[] {
                        "Events"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Start date"});
            table2.AddRow(new string[] {
                        "Event_469105",
                        "01/01/2015"});
#line 18
 testRunner.And("an event exists", ((string)(null)), table2, "And ");
#line 21
 testRunner.And("staff constituent \"Constituent_469105\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 22
 testRunner.When("I add coordinator \'Constituent_469105\' to event \'Event_469105\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("\'Constituent_469105\' is a coordinator for event \'Event_469105\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a multilevel Event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a multilevel Event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddAMultilevelEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a multilevel Event", new string[] {
                        "Events"});
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Start date"});
            table3.AddRow(new string[] {
                        "Event1_469106",
                        "01/01/2015"});
            table3.AddRow(new string[] {
                        "Event2_469106",
                        "01/01/2015"});
            table3.AddRow(new string[] {
                        "Event3_469106",
                        "01/01/2015"});
#line 28
 testRunner.And("an event exists", ((string)(null)), table3, "And ");
#line 33
 testRunner.And("event management template \"AddMultiTemplateA\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "event",
                        "parent"});
            table4.AddRow(new string[] {
                        "Event1_469106",
                        ""});
            table4.AddRow(new string[] {
                        "Event2_469106",
                        "Event1_469106"});
            table4.AddRow(new string[] {
                        "Event3_469106",
                        "Event2_469106"});
#line 34
 testRunner.When("I create a multi-event using template \"AddMultiTemplateA\"", ((string)(null)), table4, "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "event",
                        "parent"});
            table5.AddRow(new string[] {
                        "Event1_469106",
                        ""});
            table5.AddRow(new string[] {
                        "Event2_469106",
                        "Event1_469106"});
            table5.AddRow(new string[] {
                        "Event3_469106",
                        "Event2_469106"});
#line 39
 testRunner.Then("a multi-level event \"Event1_469106 - Default Summary\" exists with hierarchy", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Registration options to an Event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add Registration options to an Event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddRegistrationOptionsToAnEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Registration options to an Event", new string[] {
                        "Events"});
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Start date"});
            table6.AddRow(new string[] {
                        "Event_469109",
                        "01/01/2015"});
#line 48
 testRunner.And("an event exists", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registration type",
                        "Name"});
            table7.AddRow(new string[] {
                        "Adult",
                        "Full Price"});
#line 51
 testRunner.When("I add a registration option to event \'Event_469109\'", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registration type",
                        "Name"});
            table8.AddRow(new string[] {
                        "Adult",
                        "Full Price"});
#line 54
 testRunner.Then("event \"Event_469109\" has registration option", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add multiple Registration options to Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add multiple Registration options to Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddMultipleRegistrationOptionsToEvents()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add multiple Registration options to Events", new string[] {
                        "Events"});
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Start date"});
            table9.AddRow(new string[] {
                        "Event1_473412",
                        "01/01/2015"});
#line 61
 testRunner.And("an event exists", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Start date"});
            table10.AddRow(new string[] {
                        "Event2_473412",
                        "01/01/2015"});
#line 64
 testRunner.And("an event exists", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registration type",
                        "Name"});
            table11.AddRow(new string[] {
                        "Adult",
                        "Adult"});
            table11.AddRow(new string[] {
                        "Child",
                        "Child"});
#line 67
 testRunner.When("I add a registration option to event \'Event1_473412\'", ((string)(null)), table11, "When ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registration type",
                        "Name"});
            table12.AddRow(new string[] {
                        "Couple",
                        "Couple"});
            table12.AddRow(new string[] {
                        "Hole-in-One Sponsor",
                        "Hole-in-One Sponsor"});
#line 71
 testRunner.And("I add a registration option to event \'Event2_473412\'", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registration type",
                        "Name"});
            table13.AddRow(new string[] {
                        "Adult",
                        "Adult"});
            table13.AddRow(new string[] {
                        "Child",
                        "Child"});
#line 75
 testRunner.Then("event \"Event1_473412\" has registration option", ((string)(null)), table13, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registration type",
                        "Name"});
            table14.AddRow(new string[] {
                        "Couple",
                        "Couple"});
            table14.AddRow(new string[] {
                        "Hole-in-One Sponsor",
                        "Hole-in-One Sponsor"});
#line 79
 testRunner.And("event \"Event2_473412\" has registration option", ((string)(null)), table14, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add an Expense to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add an Expense to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddAnExpenseToAnEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add an Expense to an event", new string[] {
                        "Events"});
#line 85
this.ScenarioSetup(scenarioInfo);
#line 86
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Start date"});
            table15.AddRow(new string[] {
                        "Event_473517",
                        "01/01/2015"});
#line 87
 testRunner.And("an event exists", ((string)(null)), table15, "And ");
#line 90
 testRunner.And("constituent \'Constituent_473517\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Vendor",
                        "Budgeted amount",
                        "Comment"});
            table16.AddRow(new string[] {
                        "Entertainment",
                        "Constituent_473517",
                        "$1,500.00",
                        "Meal"});
#line 91
 testRunner.When("I add expense to \'Event_473517\'", ((string)(null)), table16, "When ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Vendor",
                        "Budgeted amount",
                        "Comment"});
            table17.AddRow(new string[] {
                        "Entertainment",
                        "Constituent_473517",
                        "$1,500.00",
                        "Meal"});
#line 94
 testRunner.Then("event \'Event_473517\' has expense", ((string)(null)), table17, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a Task with Reminder to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a Task with Reminder to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddATaskWithReminderToAnEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a Task with Reminder to an event", new string[] {
                        "Events"});
#line 99
this.ScenarioSetup(scenarioInfo);
#line 100
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Start date"});
            table18.AddRow(new string[] {
                        "Event_473577",
                        "01/01/2015"});
#line 101
 testRunner.And("an event exists", ((string)(null)), table18, "And ");
#line 104
 testRunner.And("constituent \'Constituent_473577\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Comment",
                        "Owner",
                        "Date due"});
            table19.AddRow(new string[] {
                        "Send Invitations",
                        "Prepare invitations",
                        "Constituent_473577",
                        "01/01/2050"});
#line 105
 testRunner.When("I add a task to event \'Event_473577\'", ((string)(null)), table19, "When ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Date"});
            table20.AddRow(new string[] {
                        "Reminder 1",
                        "01/01/2015"});
#line 108
 testRunner.And("add reminder to task \'Send Invitations\' on event \'Event_473577\'", ((string)(null)), table20, "And ");
#line 111
 testRunner.Then("reminder \'Reminder 1 (01/01/2015)\' exists for task \'Send Invitations\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a 2 Level multi-level Event record")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a 2 Level multi-level Event record")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddA2LevelMulti_LevelEventRecord()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a 2 Level multi-level Event record", new string[] {
                        "Events"});
#line 114
this.ScenarioSetup(scenarioInfo);
#line 115
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 116
 testRunner.And("Location \"Exhibit Hall\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Start date"});
            table21.AddRow(new string[] {
                        "Alumni Weekend 2015",
                        "05/04/2015"});
            table21.AddRow(new string[] {
                        "Saturday Daytime with lunch",
                        "05/04/2015"});
            table21.AddRow(new string[] {
                        "Saturday Daytime",
                        "05/04/2015"});
            table21.AddRow(new string[] {
                        "Saturday night with B&B (single)",
                        "05/04/2015"});
            table21.AddRow(new string[] {
                        "Saturday night with B&B (double)",
                        "05/04/2015"});
#line 117
 testRunner.And("an event exists", ((string)(null)), table21, "And ");
#line 124
 testRunner.And("event management template \"AddMultiTemplateB\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "event",
                        "parent"});
            table22.AddRow(new string[] {
                        "Alumni Weekend 2015",
                        ""});
            table22.AddRow(new string[] {
                        "Saturday Daytime with lunch",
                        "Alumni Weekend 2015"});
            table22.AddRow(new string[] {
                        "Saturday Daytime",
                        "Alumni Weekend 2015"});
            table22.AddRow(new string[] {
                        "Saturday night with B&B (single)",
                        "Alumni Weekend 2015"});
            table22.AddRow(new string[] {
                        "Saturday night with B&B (double)",
                        "Alumni Weekend 2015"});
#line 125
 testRunner.When("I start to create a multi-event using template \"AddMultiTemplateB\"", ((string)(null)), table22, "When ");
#line 132
 testRunner.And("I copy from a sub-event \"Saturday Daytime with lunch\" and name it \"Sunday Daytime" +
                    " with lunch\" under \"Alumni Weekend 2015\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "event",
                        "parent"});
            table23.AddRow(new string[] {
                        "Alumni Weekend 2015",
                        ""});
            table23.AddRow(new string[] {
                        "Saturday Daytime with lunch",
                        "Alumni Weekend 2015"});
            table23.AddRow(new string[] {
                        "Saturday Daytime",
                        "Alumni Weekend 2015"});
            table23.AddRow(new string[] {
                        "Saturday night with B&B (single)",
                        "Alumni Weekend 2015"});
            table23.AddRow(new string[] {
                        "Saturday night with B&B (double)",
                        "Alumni Weekend 2015"});
            table23.AddRow(new string[] {
                        "Sunday Daytime with lunch",
                        "Alumni Weekend 2015"});
#line 133
 testRunner.Then("a multi-level event \"Alumni Weekend 2015 - Default Summary\" exists with hierarchy" +
                    "", ((string)(null)), table23, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add Dietary Preferences to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add Dietary Preferences to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddDietaryPreferencesToAnEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Dietary Preferences to an event", new string[] {
                        "Events"});
#line 143
this.ScenarioSetup(scenarioInfo);
#line 144
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Start date"});
            table24.AddRow(new string[] {
                        "Saturday Daytime with lunch",
                        "05/04/2015"});
#line 145
 testRunner.And("an event exists", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "Options"});
            table25.AddRow(new string[] {
                        "Vegetarian"});
            table25.AddRow(new string[] {
                        "Vegan"});
            table25.AddRow(new string[] {
                        "Nut allergy"});
#line 148
 testRunner.When("I add preference \"Dietary Preferences\" to event \"Saturday Daytime with lunch\"", ((string)(null)), table25, "When ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Options"});
            table26.AddRow(new string[] {
                        "Dietary Preferences",
                        "Nut allergy; Vegan; Vegetarian"});
#line 153
 testRunner.Then("event \"Saturday Daytime with lunch\" has a preference with options", ((string)(null)), table26, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a registrant and guest to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a registrant and guest to an event")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Events")]
        [NUnit.Framework.CategoryAttribute("Events")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("Events")]
        public virtual void AddARegistrantAndGuestToAnEvent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a registrant and guest to an event", new string[] {
                        "Events"});
#line 158
this.ScenarioSetup(scenarioInfo);
#line 159
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 160
 testRunner.And("constituent \'Puppy Enthusiast\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Start date"});
            table27.AddRow(new string[] {
                        "Puppy Parade",
                        "01/01/2015"});
#line 161
 testRunner.And("an event exists", ((string)(null)), table27, "And ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registration type",
                        "Name",
                        "Registration count",
                        "Registration fee"});
            table28.AddRow(new string[] {
                        "Adult",
                        "Adult +1",
                        "2",
                        "$20.00"});
#line 164
 testRunner.And("event \'Puppy Parade\' has registration option", ((string)(null)), table28, "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Registration option",
                        "Registrant"});
            table29.AddRow(new string[] {
                        "Adult +1",
                        "Puppy Enthusiast"});
            table29.AddRow(new string[] {
                        "Adult +1",
                        "(Unnamed guest)"});
#line 167
 testRunner.When("I add registrant \'Puppy Enthusiast\' to event \'Puppy Parade\'", ((string)(null)), table29, "When ");
#line 171
 testRunner.Then("registrant record \'Puppy Enthusiast\' is created for event \'Puppy Parade\' with 1 g" +
                    "uest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
