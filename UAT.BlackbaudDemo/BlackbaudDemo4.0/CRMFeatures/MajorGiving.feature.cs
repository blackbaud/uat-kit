// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.0.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BlackbaudDemo40.CRMFeatures
{
    using TechTalk.SpecFlow;
    using System.Configuration;
    using OpenQA.Selenium.Chrome;
    using OpenQA.Selenium.Remote;
    using OpenQA.Selenium;
    using System.Collections.Generic;
    using System;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System.IO;
    using System.Drawing.Imaging;
    using ICSharpCode.SharpZipLib.Zip;
    using Blackbaud.UAT.SpecFlow.Selenium;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Major Giving Prospects")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class MajorGivingProspectsFeature : BaseTest
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        public Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext { get; set; }//;
        
#line 1 "MajorGiving.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Major Giving Prospects", "\tIn order to validate Major Giving functionality\r\n\tAs a user of BBCRM\r\n\tI want to" +
                    " add, modify, and validate Prospects and Major Giving Plans", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Major Giving Prospects")))
            {
                BlackbaudDemo40.CRMFeatures.MajorGivingProspectsFeature.FeatureSetup(null);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
            SaveChromeArtifacts(IsPass());
            StopDriver();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            ScenarioContext.Current.Add("Test", this);
            ScenarioContext.Current.Add("uniqueStamp", (DateTime.UtcNow.Subtract(new DateTime(1970, 7, 4)).TotalSeconds).ToString());
            StartDriver();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual bool IsPass()
        {
            Boolean pass = false;
            try { 
                pass = (NUnit.Framework.TestContext.CurrentContext.Result.Status == NUnit.Framework.TestStatus.Passed);
            } catch {
                pass = (TestContext.CurrentTestOutcome == Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed);
            }
            return pass;
        }
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        protected virtual void FeatureSetup()
        {
            FeatureSetup(null);
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a Prospect Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a Prospect Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void AddAProspectConstituent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a Prospect Constituent", new string[] {
                        "MajorGiving"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("constituent \'Constituent_473330\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date from",
                        "Date to"});
#line 10
 testRunner.When("I add prospect constituency to \'Constituent_473330\'", ((string)(null)), table1, "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date from",
                        "Date to",
                        "Description"});
            table2.AddRow(new string[] {
                        "",
                        "",
                        "Major giving prospect"});
#line 12
 testRunner.Then("a prospect constituency is added to \'Constituent_473330\'", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a Documentation Note based Notification to a Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a Documentation Note based Notification to a Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void AddADocumentationNoteBasedNotificationToAConstituent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a Documentation Note based Notification to a Constituent", new string[] {
                        "MajorGiving"});
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.And("constituent \'Constituent_473331\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Date",
                        "Title",
                        "Author",
                        "Notes"});
            table3.AddRow(new string[] {
                        "Career",
                        "01/01/2015",
                        "Test Note",
                        "Constituent_473331",
                        "Test note"});
#line 20
 testRunner.When("I add a Note to \'Constituent_473331\'", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Displays for"});
            table4.AddRow(new string[] {
                        "All users"});
#line 23
 testRunner.And("add a notification to note \'Test Note\'", ((string)(null)), table4, "And ");
#line 26
 testRunner.Then("the notification bar displays the Note \'Test Note\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a Major Giving Plan outline in Major Giving Setup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a Major Giving Plan outline in Major Giving Setup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void AddAMajorGivingPlanOutlineInMajorGivingSetup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a Major Giving Plan outline in Major Giving Setup", new string[] {
                        "MajorGiving"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objective",
                        "Fundraiser role",
                        "Stage",
                        "Days from start",
                        "Contact method"});
            table5.AddRow(new string[] {
                        "Clearance to Approach",
                        "Prospect manager",
                        "Identification",
                        "7",
                        ""});
            table5.AddRow(new string[] {
                        "Prepare Ask",
                        "Primary manager",
                        "Cultivation",
                        "20",
                        ""});
            table5.AddRow(new string[] {
                        "Explore Inclination",
                        "Primary manager",
                        "Cultivation",
                        "60",
                        ""});
            table5.AddRow(new string[] {
                        "Make Ask",
                        "Primary manager",
                        "Negotiation",
                        "90",
                        ""});
#line 31
 testRunner.When("I add plan outline \"MajorGivingPlan_472635\" to major giving setup", ((string)(null)), table5, "When ");
#line 37
 testRunner.Then("the plan outline \"MajorGivingPlan_472635\" is created with \"4\" steps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a step with Status as Completed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a step with Status as Completed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void AddAStepWithStatusAsCompleted()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a step with Status as Completed", new string[] {
                        "MajorGiving"});
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given("I have logged into the BBCRM home page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.And("prospect \'Prospect_376252\' exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Stages",
                        "Steps"});
            table6.AddRow(new string[] {
                        "ERBOpportunityPlanOutline",
                        "3",
                        "3"});
#line 44
 testRunner.And("major giving plan exists", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Plan name",
                        "Plan type",
                        "Start date",
                        "Outlines"});
            table7.AddRow(new string[] {
                        "Major giving plan",
                        "Major giving",
                        "01/01/2015",
                        "ERBOpportunityPlanOutline"});
#line 47
 testRunner.And("prospect \'Prospect_376252\' is associated with major giving plan", ((string)(null)), table7, "And ");
#line 50
 testRunner.When("I go to the plan \'Major giving plan\' for prospect \'Prospect_376252\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Objective",
                        "Stage",
                        "Expected date",
                        "Status",
                        "Actual date",
                        "Actual start time",
                        "Actual end time"});
            table8.AddRow(new string[] {
                        "1st Objective",
                        "Identification",
                        "01/01/2015",
                        "Completed",
                        "01/01/2015",
                        "12:00",
                        "12:00"});
#line 51
 testRunner.And("add a step", ((string)(null)), table8, "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Status",
                        "Date",
                        "Start time",
                        "End time",
                        "Objective",
                        "Stage"});
            table9.AddRow(new string[] {
                        "Completed",
                        "01/01/2015",
                        "12:00",
                        "12:00",
                        "1st Objective",
                        "Identification"});
#line 54
 testRunner.Then("a completed step is saved", ((string)(null)), table9, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
