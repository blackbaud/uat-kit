// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using Blackbaud.UAT.SpecFlow.Selenium;
using TechTalk.SpecFlow;

#pragma warning disable

namespace BlackbaudDemo40.CRMFeatures
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Major Giving Prospects")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class MajorGivingProspectsFeature : BaseTest
    {
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        public Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext { get; set; } //;

        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            var featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"),
                "Major Giving Prospects",
                "In order to validate Major Giving functionality\r\nAs a user of BBCRM\r\nI want to ad" +
                "d, modify, and validate Prospects and Major Giving Plans", ProgrammingLanguage.CSharp,
                ((string[]) (null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [NUnit.Framework.TestFixtureTearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        [NUnit.Framework.SetUpAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null)
                 && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Major Giving Prospects")))
            {
                FeatureSetup(null);
            }
        }

        [NUnit.Framework.TearDownAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
            SaveChromeArtifacts(IsPass());
            StopDriver();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            ScenarioContext.Current.Add("Test", this);
            StartDriver();
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        public virtual bool IsPass()
        {
            var pass = false;
            try
            {
                pass = (NUnit.Framework.TestContext.CurrentContext.Result.Status == NUnit.Framework.TestStatus.Passed);
            }
            catch
            {
                pass = (TestContext.CurrentTestOutcome ==
                        Microsoft.VisualStudio.TestTools.UnitTesting.UnitTestOutcome.Passed);
            }
            return pass;
        }

        [NUnit.Framework.TestFixtureSetUpAttribute()]
        protected virtual void FeatureSetup()
        {
            FeatureSetup(null);
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a Prospect Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a Prospect Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void AddAProspectConstituent()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a Prospect Constituent", new string[]
            {
                "MajorGiving"
            });
#line 7
            this.ScenarioSetup(scenarioInfo);
#line 8
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 9
            testRunner.And("constituent \'Constituent_473330\' exists", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table1 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Date from",
                "Date to"
            });
#line 10
            testRunner.When("I add prospect constituency to \'Constituent_473330\'", ((string) (null)), table1, "When ");
#line hidden
            var table2 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Date from",
                "Date to",
                "Description"
            });
            table2.AddRow(new string[]
            {
                "",
                "",
                "Major giving prospect"
            });
#line 12
            testRunner.Then("a prospect constituency is added to \'Constituent_473330\'", ((string) (null)), table2,
                "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a Documentation Note based Notification to a Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(
            "Add a Documentation Note based Notification to a Constituent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void AddADocumentationNoteBasedNotificationToAConstituent()
        {
            var scenarioInfo =
                new TechTalk.SpecFlow.ScenarioInfo("Add a Documentation Note based Notification to a Constituent",
                    new string[]
                    {
                        "MajorGiving"
                    });
#line 17
            this.ScenarioSetup(scenarioInfo);
#line 18
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 19
            testRunner.And("constituent \'Constituent_473331\' exists", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table3 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Type",
                "Date",
                "Title",
                "Author",
                "Notes"
            });
            table3.AddRow(new string[]
            {
                "Career",
                "1/1/2015",
                "Test Note",
                "Constituent_473331",
                "Test note"
            });
#line 20
            testRunner.When("I add a Note to \'Constituent_473331\'", ((string) (null)), table3, "When ");
#line hidden
            var table4 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Displays for"
            });
            table4.AddRow(new string[]
            {
                "All users"
            });
#line 23
            testRunner.And("add a notification to note \'Test Note\'", ((string) (null)), table4, "And ");
#line 26
            testRunner.Then("the notification bar displays the Note \'Test Note\'", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a Fundraiser to a Prospect Team on a Prospect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(
            "Add a Fundraiser to a Prospect Team on a Prospect")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void AddAFundraiserToAProspectTeamOnAProspect()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a Fundraiser to a Prospect Team on a Prospect",
                new string[]
                {
                    "MajorGiving"
                });
#line 29
            this.ScenarioSetup(scenarioInfo);
#line 30
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 31
            testRunner.And("prospect \'Prospect_473332\' exists", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "And ");
#line 32
            testRunner.And("fundraiser \'Fundraiser_473332\' exists", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 33
            testRunner.And("prospect team role \'Lead\' exists for \'Prospect_473332\'", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line hidden
            var table5 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Team member",
                "Role"
            });
            table5.AddRow(new string[]
            {
                "Fundraiser_473332",
                "Lead"
            });
#line 34
            testRunner.When("I add team member to \'Prospect_473332\'", ((string) (null)), table5, "When ");
#line hidden
            var table6 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Name",
                "Role"
            });
            table6.AddRow(new string[]
            {
                "Fundraiser_473332",
                "Lead"
            });
#line 37
            testRunner.Then("the \'Lead - Current\' team member exists", ((string) (null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a Major Giving Plan outline in Major Giving Setup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(
            "Add a Major Giving Plan outline in Major Giving Setup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void AddAMajorGivingPlanOutlineInMajorGivingSetup()
        {
            var scenarioInfo =
                new TechTalk.SpecFlow.ScenarioInfo("Add a Major Giving Plan outline in Major Giving Setup", new string[]
                {
                    "MajorGiving"
                });
#line 42
            this.ScenarioSetup(scenarioInfo);
#line 43
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line hidden
            var table7 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Objective",
                "Fundraiser role",
                "Stage",
                "Days from start",
                "Contact method"
            });
            table7.AddRow(new string[]
            {
                "Clearance to Approach",
                "Prospect manager",
                "Identification",
                "7",
                ""
            });
            table7.AddRow(new string[]
            {
                "Prepare Ask",
                "Primary manager",
                "Cultivation",
                "20",
                ""
            });
            table7.AddRow(new string[]
            {
                "Explore Inclination",
                "Primary manager",
                "Cultivation",
                "60",
                ""
            });
            table7.AddRow(new string[]
            {
                "Make Ask",
                "Primary manager",
                "Negotiation",
                "90",
                ""
            });
#line 44
            testRunner.When("I add plan outline \"MajorGivingPlan_472635\" to major giving setup", ((string) (null)),
                table7, "When ");
#line 50
            testRunner.Then("the plan outline \"MajorGivingPlan_472635\" is created with \"4\" steps", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add a step with Status as Completed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add a step with Status as Completed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Major Giving Prospects")]
        [NUnit.Framework.CategoryAttribute("MajorGiving")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategory("MajorGiving")]
        public virtual void AddAStepWithStatusAsCompleted()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add a step with Status as Completed", new string[]
            {
                "MajorGiving"
            });
#line 54
            this.ScenarioSetup(scenarioInfo);
#line 55
            testRunner.Given("I have logged into the BBCRM home page", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 56
            testRunner.And("prospect \'Prospect_376252\' exists", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "And ");
#line hidden
            var table8 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Type",
                "Stages",
                "Steps"
            });
            table8.AddRow(new string[]
            {
                "ERBOpportunityPlanOutline",
                "3",
                "3"
            });
#line 57
            testRunner.And("major giving plan exists", ((string) (null)), table8, "And ");
#line hidden
            var table9 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Plan name",
                "Plan type",
                "Start date",
                "Outlines"
            });
            table9.AddRow(new string[]
            {
                "Major giving plan",
                "Major giving",
                "1/1/2015",
                "ERBOpportunityPlanOutline"
            });
#line 60
            testRunner.And("prospect \'Prospect_376252\' is associated with major giving plan", ((string) (null)),
                table9, "And ");
#line 63
            testRunner.When("I go to the plan \'Major giving plan\' for prospect \'Prospect_376252\'", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line hidden
            var table10 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Objective",
                "Stage",
                "Expected date",
                "Status",
                "Actual date",
                "Actual start time",
                "Actual end time"
            });
            table10.AddRow(new string[]
            {
                "1st Objective",
                "Identification",
                "1/1/2015",
                "Completed",
                "1/1/2015",
                "12:00 PM",
                "12:00 PM"
            });
#line 64
            testRunner.And("add a step", ((string) (null)), table10, "And ");
#line hidden
            var table11 = new TechTalk.SpecFlow.Table(new string[]
            {
                "Status",
                "Date",
                "Start time",
                "End time",
                "Objective",
                "Stage"
            });
            table11.AddRow(new string[]
            {
                "Completed",
                "1/1/2015",
                "12:00 PM",
                "12:00 PM",
                "1st Objective",
                "Identification"
            });
#line 67
            testRunner.Then("a completed step is saved", ((string) (null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}

#pragma warning restore

#endregion